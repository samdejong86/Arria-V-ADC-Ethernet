// a5gx_starter_fpga_bup_qsys_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 196

`timescale 1 ps / 1 ps
module a5gx_starter_fpga_bup_qsys_mm_interconnect_0 (
		input  wire        clkin_50_clk_clk,                           //                         clkin_50_clk.clk
		input  wire        cpu_reset_reset_bridge_in_reset_reset,      //      cpu_reset_reset_bridge_in_reset.reset
		input  wire        sgdma_tx_reset_reset_bridge_in_reset_reset, // sgdma_tx_reset_reset_bridge_in_reset.reset
		input  wire [27:0] cpu_data_master_address,                    //                      cpu_data_master.address
		output wire        cpu_data_master_waitrequest,                //                                     .waitrequest
		input  wire [3:0]  cpu_data_master_byteenable,                 //                                     .byteenable
		input  wire        cpu_data_master_read,                       //                                     .read
		output wire [31:0] cpu_data_master_readdata,                   //                                     .readdata
		output wire        cpu_data_master_readdatavalid,              //                                     .readdatavalid
		input  wire        cpu_data_master_write,                      //                                     .write
		input  wire [31:0] cpu_data_master_writedata,                  //                                     .writedata
		input  wire        cpu_data_master_debugaccess,                //                                     .debugaccess
		input  wire [27:0] cpu_instruction_master_address,             //               cpu_instruction_master.address
		output wire        cpu_instruction_master_waitrequest,         //                                     .waitrequest
		input  wire        cpu_instruction_master_read,                //                                     .read
		output wire [31:0] cpu_instruction_master_readdata,            //                                     .readdata
		output wire        cpu_instruction_master_readdatavalid,       //                                     .readdatavalid
		input  wire [31:0] sgdma_rx_descriptor_read_address,           //             sgdma_rx_descriptor_read.address
		output wire        sgdma_rx_descriptor_read_waitrequest,       //                                     .waitrequest
		input  wire        sgdma_rx_descriptor_read_read,              //                                     .read
		output wire [31:0] sgdma_rx_descriptor_read_readdata,          //                                     .readdata
		output wire        sgdma_rx_descriptor_read_readdatavalid,     //                                     .readdatavalid
		input  wire [31:0] sgdma_rx_descriptor_write_address,          //            sgdma_rx_descriptor_write.address
		output wire        sgdma_rx_descriptor_write_waitrequest,      //                                     .waitrequest
		input  wire        sgdma_rx_descriptor_write_write,            //                                     .write
		input  wire [31:0] sgdma_rx_descriptor_write_writedata,        //                                     .writedata
		input  wire [31:0] sgdma_rx_m_write_address,                   //                     sgdma_rx_m_write.address
		output wire        sgdma_rx_m_write_waitrequest,               //                                     .waitrequest
		input  wire [3:0]  sgdma_rx_m_write_byteenable,                //                                     .byteenable
		input  wire        sgdma_rx_m_write_write,                     //                                     .write
		input  wire [31:0] sgdma_rx_m_write_writedata,                 //                                     .writedata
		input  wire [31:0] sgdma_tx_descriptor_read_address,           //             sgdma_tx_descriptor_read.address
		output wire        sgdma_tx_descriptor_read_waitrequest,       //                                     .waitrequest
		input  wire        sgdma_tx_descriptor_read_read,              //                                     .read
		output wire [31:0] sgdma_tx_descriptor_read_readdata,          //                                     .readdata
		output wire        sgdma_tx_descriptor_read_readdatavalid,     //                                     .readdatavalid
		input  wire [31:0] sgdma_tx_descriptor_write_address,          //            sgdma_tx_descriptor_write.address
		output wire        sgdma_tx_descriptor_write_waitrequest,      //                                     .waitrequest
		input  wire        sgdma_tx_descriptor_write_write,            //                                     .write
		input  wire [31:0] sgdma_tx_descriptor_write_writedata,        //                                     .writedata
		input  wire [31:0] sgdma_tx_m_read_address,                    //                      sgdma_tx_m_read.address
		output wire        sgdma_tx_m_read_waitrequest,                //                                     .waitrequest
		input  wire        sgdma_tx_m_read_read,                       //                                     .read
		output wire [31:0] sgdma_tx_m_read_readdata,                   //                                     .readdata
		output wire        sgdma_tx_m_read_readdatavalid,              //                                     .readdatavalid
		output wire [8:0]  cpu_debug_mem_slave_address,                //                  cpu_debug_mem_slave.address
		output wire        cpu_debug_mem_slave_write,                  //                                     .write
		output wire        cpu_debug_mem_slave_read,                   //                                     .read
		input  wire [31:0] cpu_debug_mem_slave_readdata,               //                                     .readdata
		output wire [31:0] cpu_debug_mem_slave_writedata,              //                                     .writedata
		output wire [3:0]  cpu_debug_mem_slave_byteenable,             //                                     .byteenable
		input  wire        cpu_debug_mem_slave_waitrequest,            //                                     .waitrequest
		output wire        cpu_debug_mem_slave_debugaccess,            //                                     .debugaccess
		output wire [10:0] descriptor_memory_s1_address,               //                 descriptor_memory_s1.address
		output wire        descriptor_memory_s1_write,                 //                                     .write
		input  wire [31:0] descriptor_memory_s1_readdata,              //                                     .readdata
		output wire [31:0] descriptor_memory_s1_writedata,             //                                     .writedata
		output wire [3:0]  descriptor_memory_s1_byteenable,            //                                     .byteenable
		output wire        descriptor_memory_s1_chipselect,            //                                     .chipselect
		output wire        descriptor_memory_s1_clken,                 //                                     .clken
		output wire [26:0] ext_flash_uas_address,                      //                        ext_flash_uas.address
		output wire        ext_flash_uas_write,                        //                                     .write
		output wire        ext_flash_uas_read,                         //                                     .read
		input  wire [15:0] ext_flash_uas_readdata,                     //                                     .readdata
		output wire [15:0] ext_flash_uas_writedata,                    //                                     .writedata
		output wire [1:0]  ext_flash_uas_burstcount,                   //                                     .burstcount
		output wire [1:0]  ext_flash_uas_byteenable,                   //                                     .byteenable
		input  wire        ext_flash_uas_readdatavalid,                //                                     .readdatavalid
		input  wire        ext_flash_uas_waitrequest,                  //                                     .waitrequest
		output wire        ext_flash_uas_lock,                         //                                     .lock
		output wire        ext_flash_uas_debugaccess,                  //                                     .debugaccess
		output wire [18:0] onchip_ram_s1_address,                      //                        onchip_ram_s1.address
		output wire        onchip_ram_s1_write,                        //                                     .write
		input  wire [31:0] onchip_ram_s1_readdata,                     //                                     .readdata
		output wire [31:0] onchip_ram_s1_writedata,                    //                                     .writedata
		output wire [3:0]  onchip_ram_s1_byteenable,                   //                                     .byteenable
		output wire        onchip_ram_s1_chipselect,                   //                                     .chipselect
		output wire        onchip_ram_s1_clken,                        //                                     .clken
		output wire [18:0] onchip_ram_s2_address,                      //                        onchip_ram_s2.address
		output wire        onchip_ram_s2_write,                        //                                     .write
		input  wire [31:0] onchip_ram_s2_readdata,                     //                                     .readdata
		output wire [31:0] onchip_ram_s2_writedata,                    //                                     .writedata
		output wire [3:0]  onchip_ram_s2_byteenable,                   //                                     .byteenable
		output wire        onchip_ram_s2_chipselect,                   //                                     .chipselect
		output wire        onchip_ram_s2_clken,                        //                                     .clken
		output wire [9:0]  pb_cpu_to_io_s0_address,                    //                      pb_cpu_to_io_s0.address
		output wire        pb_cpu_to_io_s0_write,                      //                                     .write
		output wire        pb_cpu_to_io_s0_read,                       //                                     .read
		input  wire [31:0] pb_cpu_to_io_s0_readdata,                   //                                     .readdata
		output wire [31:0] pb_cpu_to_io_s0_writedata,                  //                                     .writedata
		output wire [0:0]  pb_cpu_to_io_s0_burstcount,                 //                                     .burstcount
		output wire [3:0]  pb_cpu_to_io_s0_byteenable,                 //                                     .byteenable
		input  wire        pb_cpu_to_io_s0_readdatavalid,              //                                     .readdatavalid
		input  wire        pb_cpu_to_io_s0_waitrequest,                //                                     .waitrequest
		output wire        pb_cpu_to_io_s0_debugaccess,                //                                     .debugaccess
		output wire [3:0]  sgdma_rx_csr_address,                       //                         sgdma_rx_csr.address
		output wire        sgdma_rx_csr_write,                         //                                     .write
		output wire        sgdma_rx_csr_read,                          //                                     .read
		input  wire [31:0] sgdma_rx_csr_readdata,                      //                                     .readdata
		output wire [31:0] sgdma_rx_csr_writedata,                     //                                     .writedata
		output wire        sgdma_rx_csr_chipselect,                    //                                     .chipselect
		output wire [3:0]  sgdma_tx_csr_address,                       //                         sgdma_tx_csr.address
		output wire        sgdma_tx_csr_write,                         //                                     .write
		output wire        sgdma_tx_csr_read,                          //                                     .read
		input  wire [31:0] sgdma_tx_csr_readdata,                      //                                     .readdata
		output wire [31:0] sgdma_tx_csr_writedata,                     //                                     .writedata
		output wire        sgdma_tx_csr_chipselect,                    //                                     .chipselect
		output wire [7:0]  tse_mac_control_port_address,               //                 tse_mac_control_port.address
		output wire        tse_mac_control_port_write,                 //                                     .write
		output wire        tse_mac_control_port_read,                  //                                     .read
		input  wire [31:0] tse_mac_control_port_readdata,              //                                     .readdata
		output wire [31:0] tse_mac_control_port_writedata,             //                                     .writedata
		input  wire        tse_mac_control_port_waitrequest            //                                     .waitrequest
	);

	wire          cpu_data_master_translator_avalon_universal_master_0_waitrequest;             // cpu_data_master_agent:av_waitrequest -> cpu_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;                // cpu_data_master_agent:av_readdata -> cpu_data_master_translator:uav_readdata
	wire          cpu_data_master_translator_avalon_universal_master_0_debugaccess;             // cpu_data_master_translator:uav_debugaccess -> cpu_data_master_agent:av_debugaccess
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_address;                 // cpu_data_master_translator:uav_address -> cpu_data_master_agent:av_address
	wire          cpu_data_master_translator_avalon_universal_master_0_read;                    // cpu_data_master_translator:uav_read -> cpu_data_master_agent:av_read
	wire    [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;              // cpu_data_master_translator:uav_byteenable -> cpu_data_master_agent:av_byteenable
	wire          cpu_data_master_translator_avalon_universal_master_0_readdatavalid;           // cpu_data_master_agent:av_readdatavalid -> cpu_data_master_translator:uav_readdatavalid
	wire          cpu_data_master_translator_avalon_universal_master_0_lock;                    // cpu_data_master_translator:uav_lock -> cpu_data_master_agent:av_lock
	wire          cpu_data_master_translator_avalon_universal_master_0_write;                   // cpu_data_master_translator:uav_write -> cpu_data_master_agent:av_write
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;               // cpu_data_master_translator:uav_writedata -> cpu_data_master_agent:av_writedata
	wire    [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;              // cpu_data_master_translator:uav_burstcount -> cpu_data_master_agent:av_burstcount
	wire          cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;      // cpu_instruction_master_agent:av_waitrequest -> cpu_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;         // cpu_instruction_master_agent:av_readdata -> cpu_instruction_master_translator:uav_readdata
	wire          cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;      // cpu_instruction_master_translator:uav_debugaccess -> cpu_instruction_master_agent:av_debugaccess
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_address;          // cpu_instruction_master_translator:uav_address -> cpu_instruction_master_agent:av_address
	wire          cpu_instruction_master_translator_avalon_universal_master_0_read;             // cpu_instruction_master_translator:uav_read -> cpu_instruction_master_agent:av_read
	wire    [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;       // cpu_instruction_master_translator:uav_byteenable -> cpu_instruction_master_agent:av_byteenable
	wire          cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid;    // cpu_instruction_master_agent:av_readdatavalid -> cpu_instruction_master_translator:uav_readdatavalid
	wire          cpu_instruction_master_translator_avalon_universal_master_0_lock;             // cpu_instruction_master_translator:uav_lock -> cpu_instruction_master_agent:av_lock
	wire          cpu_instruction_master_translator_avalon_universal_master_0_write;            // cpu_instruction_master_translator:uav_write -> cpu_instruction_master_agent:av_write
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;        // cpu_instruction_master_translator:uav_writedata -> cpu_instruction_master_agent:av_writedata
	wire    [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;       // cpu_instruction_master_translator:uav_burstcount -> cpu_instruction_master_agent:av_burstcount
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_waitrequest;             // sgdma_tx_m_read_agent:av_waitrequest -> sgdma_tx_m_read_translator:uav_waitrequest
	wire   [31:0] sgdma_tx_m_read_translator_avalon_universal_master_0_readdata;                // sgdma_tx_m_read_agent:av_readdata -> sgdma_tx_m_read_translator:uav_readdata
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_debugaccess;             // sgdma_tx_m_read_translator:uav_debugaccess -> sgdma_tx_m_read_agent:av_debugaccess
	wire   [31:0] sgdma_tx_m_read_translator_avalon_universal_master_0_address;                 // sgdma_tx_m_read_translator:uav_address -> sgdma_tx_m_read_agent:av_address
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_read;                    // sgdma_tx_m_read_translator:uav_read -> sgdma_tx_m_read_agent:av_read
	wire    [3:0] sgdma_tx_m_read_translator_avalon_universal_master_0_byteenable;              // sgdma_tx_m_read_translator:uav_byteenable -> sgdma_tx_m_read_agent:av_byteenable
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_readdatavalid;           // sgdma_tx_m_read_agent:av_readdatavalid -> sgdma_tx_m_read_translator:uav_readdatavalid
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_lock;                    // sgdma_tx_m_read_translator:uav_lock -> sgdma_tx_m_read_agent:av_lock
	wire          sgdma_tx_m_read_translator_avalon_universal_master_0_write;                   // sgdma_tx_m_read_translator:uav_write -> sgdma_tx_m_read_agent:av_write
	wire   [31:0] sgdma_tx_m_read_translator_avalon_universal_master_0_writedata;               // sgdma_tx_m_read_translator:uav_writedata -> sgdma_tx_m_read_agent:av_writedata
	wire    [2:0] sgdma_tx_m_read_translator_avalon_universal_master_0_burstcount;              // sgdma_tx_m_read_translator:uav_burstcount -> sgdma_tx_m_read_agent:av_burstcount
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_waitrequest;            // sgdma_rx_m_write_agent:av_waitrequest -> sgdma_rx_m_write_translator:uav_waitrequest
	wire   [31:0] sgdma_rx_m_write_translator_avalon_universal_master_0_readdata;               // sgdma_rx_m_write_agent:av_readdata -> sgdma_rx_m_write_translator:uav_readdata
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_debugaccess;            // sgdma_rx_m_write_translator:uav_debugaccess -> sgdma_rx_m_write_agent:av_debugaccess
	wire   [31:0] sgdma_rx_m_write_translator_avalon_universal_master_0_address;                // sgdma_rx_m_write_translator:uav_address -> sgdma_rx_m_write_agent:av_address
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_read;                   // sgdma_rx_m_write_translator:uav_read -> sgdma_rx_m_write_agent:av_read
	wire    [3:0] sgdma_rx_m_write_translator_avalon_universal_master_0_byteenable;             // sgdma_rx_m_write_translator:uav_byteenable -> sgdma_rx_m_write_agent:av_byteenable
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_readdatavalid;          // sgdma_rx_m_write_agent:av_readdatavalid -> sgdma_rx_m_write_translator:uav_readdatavalid
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_lock;                   // sgdma_rx_m_write_translator:uav_lock -> sgdma_rx_m_write_agent:av_lock
	wire          sgdma_rx_m_write_translator_avalon_universal_master_0_write;                  // sgdma_rx_m_write_translator:uav_write -> sgdma_rx_m_write_agent:av_write
	wire   [31:0] sgdma_rx_m_write_translator_avalon_universal_master_0_writedata;              // sgdma_rx_m_write_translator:uav_writedata -> sgdma_rx_m_write_agent:av_writedata
	wire    [2:0] sgdma_rx_m_write_translator_avalon_universal_master_0_burstcount;             // sgdma_rx_m_write_translator:uav_burstcount -> sgdma_rx_m_write_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                        // rsp_mux_003:src_valid -> sgdma_rx_m_write_agent:rp_valid
	wire  [109:0] rsp_mux_003_src_data;                                                         // rsp_mux_003:src_data -> sgdma_rx_m_write_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                        // sgdma_rx_m_write_agent:rp_ready -> rsp_mux_003:src_ready
	wire    [8:0] rsp_mux_003_src_channel;                                                      // rsp_mux_003:src_channel -> sgdma_rx_m_write_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                // rsp_mux_003:src_startofpacket -> sgdma_rx_m_write_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                  // rsp_mux_003:src_endofpacket -> sgdma_rx_m_write_agent:rp_endofpacket
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_waitrequest;    // sgdma_rx_descriptor_read_agent:av_waitrequest -> sgdma_rx_descriptor_read_translator:uav_waitrequest
	wire   [31:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdata;       // sgdma_rx_descriptor_read_agent:av_readdata -> sgdma_rx_descriptor_read_translator:uav_readdata
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_debugaccess;    // sgdma_rx_descriptor_read_translator:uav_debugaccess -> sgdma_rx_descriptor_read_agent:av_debugaccess
	wire   [31:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_address;        // sgdma_rx_descriptor_read_translator:uav_address -> sgdma_rx_descriptor_read_agent:av_address
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_read;           // sgdma_rx_descriptor_read_translator:uav_read -> sgdma_rx_descriptor_read_agent:av_read
	wire    [3:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_byteenable;     // sgdma_rx_descriptor_read_translator:uav_byteenable -> sgdma_rx_descriptor_read_agent:av_byteenable
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdatavalid;  // sgdma_rx_descriptor_read_agent:av_readdatavalid -> sgdma_rx_descriptor_read_translator:uav_readdatavalid
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_lock;           // sgdma_rx_descriptor_read_translator:uav_lock -> sgdma_rx_descriptor_read_agent:av_lock
	wire          sgdma_rx_descriptor_read_translator_avalon_universal_master_0_write;          // sgdma_rx_descriptor_read_translator:uav_write -> sgdma_rx_descriptor_read_agent:av_write
	wire   [31:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_writedata;      // sgdma_rx_descriptor_read_translator:uav_writedata -> sgdma_rx_descriptor_read_agent:av_writedata
	wire    [2:0] sgdma_rx_descriptor_read_translator_avalon_universal_master_0_burstcount;     // sgdma_rx_descriptor_read_translator:uav_burstcount -> sgdma_rx_descriptor_read_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                        // rsp_mux_004:src_valid -> sgdma_rx_descriptor_read_agent:rp_valid
	wire  [109:0] rsp_mux_004_src_data;                                                         // rsp_mux_004:src_data -> sgdma_rx_descriptor_read_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                        // sgdma_rx_descriptor_read_agent:rp_ready -> rsp_mux_004:src_ready
	wire    [8:0] rsp_mux_004_src_channel;                                                      // rsp_mux_004:src_channel -> sgdma_rx_descriptor_read_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                // rsp_mux_004:src_startofpacket -> sgdma_rx_descriptor_read_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                  // rsp_mux_004:src_endofpacket -> sgdma_rx_descriptor_read_agent:rp_endofpacket
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_waitrequest;    // sgdma_tx_descriptor_read_agent:av_waitrequest -> sgdma_tx_descriptor_read_translator:uav_waitrequest
	wire   [31:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdata;       // sgdma_tx_descriptor_read_agent:av_readdata -> sgdma_tx_descriptor_read_translator:uav_readdata
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_debugaccess;    // sgdma_tx_descriptor_read_translator:uav_debugaccess -> sgdma_tx_descriptor_read_agent:av_debugaccess
	wire   [31:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_address;        // sgdma_tx_descriptor_read_translator:uav_address -> sgdma_tx_descriptor_read_agent:av_address
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_read;           // sgdma_tx_descriptor_read_translator:uav_read -> sgdma_tx_descriptor_read_agent:av_read
	wire    [3:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_byteenable;     // sgdma_tx_descriptor_read_translator:uav_byteenable -> sgdma_tx_descriptor_read_agent:av_byteenable
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdatavalid;  // sgdma_tx_descriptor_read_agent:av_readdatavalid -> sgdma_tx_descriptor_read_translator:uav_readdatavalid
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_lock;           // sgdma_tx_descriptor_read_translator:uav_lock -> sgdma_tx_descriptor_read_agent:av_lock
	wire          sgdma_tx_descriptor_read_translator_avalon_universal_master_0_write;          // sgdma_tx_descriptor_read_translator:uav_write -> sgdma_tx_descriptor_read_agent:av_write
	wire   [31:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_writedata;      // sgdma_tx_descriptor_read_translator:uav_writedata -> sgdma_tx_descriptor_read_agent:av_writedata
	wire    [2:0] sgdma_tx_descriptor_read_translator_avalon_universal_master_0_burstcount;     // sgdma_tx_descriptor_read_translator:uav_burstcount -> sgdma_tx_descriptor_read_agent:av_burstcount
	wire          rsp_mux_005_src_valid;                                                        // rsp_mux_005:src_valid -> sgdma_tx_descriptor_read_agent:rp_valid
	wire  [109:0] rsp_mux_005_src_data;                                                         // rsp_mux_005:src_data -> sgdma_tx_descriptor_read_agent:rp_data
	wire          rsp_mux_005_src_ready;                                                        // sgdma_tx_descriptor_read_agent:rp_ready -> rsp_mux_005:src_ready
	wire    [8:0] rsp_mux_005_src_channel;                                                      // rsp_mux_005:src_channel -> sgdma_tx_descriptor_read_agent:rp_channel
	wire          rsp_mux_005_src_startofpacket;                                                // rsp_mux_005:src_startofpacket -> sgdma_tx_descriptor_read_agent:rp_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                  // rsp_mux_005:src_endofpacket -> sgdma_tx_descriptor_read_agent:rp_endofpacket
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_waitrequest;   // sgdma_rx_descriptor_write_agent:av_waitrequest -> sgdma_rx_descriptor_write_translator:uav_waitrequest
	wire   [31:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdata;      // sgdma_rx_descriptor_write_agent:av_readdata -> sgdma_rx_descriptor_write_translator:uav_readdata
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_debugaccess;   // sgdma_rx_descriptor_write_translator:uav_debugaccess -> sgdma_rx_descriptor_write_agent:av_debugaccess
	wire   [31:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_address;       // sgdma_rx_descriptor_write_translator:uav_address -> sgdma_rx_descriptor_write_agent:av_address
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_read;          // sgdma_rx_descriptor_write_translator:uav_read -> sgdma_rx_descriptor_write_agent:av_read
	wire    [3:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_byteenable;    // sgdma_rx_descriptor_write_translator:uav_byteenable -> sgdma_rx_descriptor_write_agent:av_byteenable
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdatavalid; // sgdma_rx_descriptor_write_agent:av_readdatavalid -> sgdma_rx_descriptor_write_translator:uav_readdatavalid
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_lock;          // sgdma_rx_descriptor_write_translator:uav_lock -> sgdma_rx_descriptor_write_agent:av_lock
	wire          sgdma_rx_descriptor_write_translator_avalon_universal_master_0_write;         // sgdma_rx_descriptor_write_translator:uav_write -> sgdma_rx_descriptor_write_agent:av_write
	wire   [31:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_writedata;     // sgdma_rx_descriptor_write_translator:uav_writedata -> sgdma_rx_descriptor_write_agent:av_writedata
	wire    [2:0] sgdma_rx_descriptor_write_translator_avalon_universal_master_0_burstcount;    // sgdma_rx_descriptor_write_translator:uav_burstcount -> sgdma_rx_descriptor_write_agent:av_burstcount
	wire          rsp_mux_006_src_valid;                                                        // rsp_mux_006:src_valid -> sgdma_rx_descriptor_write_agent:rp_valid
	wire  [109:0] rsp_mux_006_src_data;                                                         // rsp_mux_006:src_data -> sgdma_rx_descriptor_write_agent:rp_data
	wire          rsp_mux_006_src_ready;                                                        // sgdma_rx_descriptor_write_agent:rp_ready -> rsp_mux_006:src_ready
	wire    [8:0] rsp_mux_006_src_channel;                                                      // rsp_mux_006:src_channel -> sgdma_rx_descriptor_write_agent:rp_channel
	wire          rsp_mux_006_src_startofpacket;                                                // rsp_mux_006:src_startofpacket -> sgdma_rx_descriptor_write_agent:rp_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                  // rsp_mux_006:src_endofpacket -> sgdma_rx_descriptor_write_agent:rp_endofpacket
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_waitrequest;   // sgdma_tx_descriptor_write_agent:av_waitrequest -> sgdma_tx_descriptor_write_translator:uav_waitrequest
	wire   [31:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdata;      // sgdma_tx_descriptor_write_agent:av_readdata -> sgdma_tx_descriptor_write_translator:uav_readdata
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_debugaccess;   // sgdma_tx_descriptor_write_translator:uav_debugaccess -> sgdma_tx_descriptor_write_agent:av_debugaccess
	wire   [31:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_address;       // sgdma_tx_descriptor_write_translator:uav_address -> sgdma_tx_descriptor_write_agent:av_address
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_read;          // sgdma_tx_descriptor_write_translator:uav_read -> sgdma_tx_descriptor_write_agent:av_read
	wire    [3:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_byteenable;    // sgdma_tx_descriptor_write_translator:uav_byteenable -> sgdma_tx_descriptor_write_agent:av_byteenable
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdatavalid; // sgdma_tx_descriptor_write_agent:av_readdatavalid -> sgdma_tx_descriptor_write_translator:uav_readdatavalid
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_lock;          // sgdma_tx_descriptor_write_translator:uav_lock -> sgdma_tx_descriptor_write_agent:av_lock
	wire          sgdma_tx_descriptor_write_translator_avalon_universal_master_0_write;         // sgdma_tx_descriptor_write_translator:uav_write -> sgdma_tx_descriptor_write_agent:av_write
	wire   [31:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_writedata;     // sgdma_tx_descriptor_write_translator:uav_writedata -> sgdma_tx_descriptor_write_agent:av_writedata
	wire    [2:0] sgdma_tx_descriptor_write_translator_avalon_universal_master_0_burstcount;    // sgdma_tx_descriptor_write_translator:uav_burstcount -> sgdma_tx_descriptor_write_agent:av_burstcount
	wire          rsp_mux_007_src_valid;                                                        // rsp_mux_007:src_valid -> sgdma_tx_descriptor_write_agent:rp_valid
	wire  [109:0] rsp_mux_007_src_data;                                                         // rsp_mux_007:src_data -> sgdma_tx_descriptor_write_agent:rp_data
	wire          rsp_mux_007_src_ready;                                                        // sgdma_tx_descriptor_write_agent:rp_ready -> rsp_mux_007:src_ready
	wire    [8:0] rsp_mux_007_src_channel;                                                      // rsp_mux_007:src_channel -> sgdma_tx_descriptor_write_agent:rp_channel
	wire          rsp_mux_007_src_startofpacket;                                                // rsp_mux_007:src_startofpacket -> sgdma_tx_descriptor_write_agent:rp_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                  // rsp_mux_007:src_endofpacket -> sgdma_tx_descriptor_write_agent:rp_endofpacket
	wire   [31:0] tse_mac_control_port_agent_m0_readdata;                                       // tse_mac_control_port_translator:uav_readdata -> tse_mac_control_port_agent:m0_readdata
	wire          tse_mac_control_port_agent_m0_waitrequest;                                    // tse_mac_control_port_translator:uav_waitrequest -> tse_mac_control_port_agent:m0_waitrequest
	wire          tse_mac_control_port_agent_m0_debugaccess;                                    // tse_mac_control_port_agent:m0_debugaccess -> tse_mac_control_port_translator:uav_debugaccess
	wire   [31:0] tse_mac_control_port_agent_m0_address;                                        // tse_mac_control_port_agent:m0_address -> tse_mac_control_port_translator:uav_address
	wire    [3:0] tse_mac_control_port_agent_m0_byteenable;                                     // tse_mac_control_port_agent:m0_byteenable -> tse_mac_control_port_translator:uav_byteenable
	wire          tse_mac_control_port_agent_m0_read;                                           // tse_mac_control_port_agent:m0_read -> tse_mac_control_port_translator:uav_read
	wire          tse_mac_control_port_agent_m0_readdatavalid;                                  // tse_mac_control_port_translator:uav_readdatavalid -> tse_mac_control_port_agent:m0_readdatavalid
	wire          tse_mac_control_port_agent_m0_lock;                                           // tse_mac_control_port_agent:m0_lock -> tse_mac_control_port_translator:uav_lock
	wire   [31:0] tse_mac_control_port_agent_m0_writedata;                                      // tse_mac_control_port_agent:m0_writedata -> tse_mac_control_port_translator:uav_writedata
	wire          tse_mac_control_port_agent_m0_write;                                          // tse_mac_control_port_agent:m0_write -> tse_mac_control_port_translator:uav_write
	wire    [2:0] tse_mac_control_port_agent_m0_burstcount;                                     // tse_mac_control_port_agent:m0_burstcount -> tse_mac_control_port_translator:uav_burstcount
	wire          tse_mac_control_port_agent_rf_source_valid;                                   // tse_mac_control_port_agent:rf_source_valid -> tse_mac_control_port_agent_rsp_fifo:in_valid
	wire  [110:0] tse_mac_control_port_agent_rf_source_data;                                    // tse_mac_control_port_agent:rf_source_data -> tse_mac_control_port_agent_rsp_fifo:in_data
	wire          tse_mac_control_port_agent_rf_source_ready;                                   // tse_mac_control_port_agent_rsp_fifo:in_ready -> tse_mac_control_port_agent:rf_source_ready
	wire          tse_mac_control_port_agent_rf_source_startofpacket;                           // tse_mac_control_port_agent:rf_source_startofpacket -> tse_mac_control_port_agent_rsp_fifo:in_startofpacket
	wire          tse_mac_control_port_agent_rf_source_endofpacket;                             // tse_mac_control_port_agent:rf_source_endofpacket -> tse_mac_control_port_agent_rsp_fifo:in_endofpacket
	wire          tse_mac_control_port_agent_rsp_fifo_out_valid;                                // tse_mac_control_port_agent_rsp_fifo:out_valid -> tse_mac_control_port_agent:rf_sink_valid
	wire  [110:0] tse_mac_control_port_agent_rsp_fifo_out_data;                                 // tse_mac_control_port_agent_rsp_fifo:out_data -> tse_mac_control_port_agent:rf_sink_data
	wire          tse_mac_control_port_agent_rsp_fifo_out_ready;                                // tse_mac_control_port_agent:rf_sink_ready -> tse_mac_control_port_agent_rsp_fifo:out_ready
	wire          tse_mac_control_port_agent_rsp_fifo_out_startofpacket;                        // tse_mac_control_port_agent_rsp_fifo:out_startofpacket -> tse_mac_control_port_agent:rf_sink_startofpacket
	wire          tse_mac_control_port_agent_rsp_fifo_out_endofpacket;                          // tse_mac_control_port_agent_rsp_fifo:out_endofpacket -> tse_mac_control_port_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                            // cmd_mux:src_valid -> tse_mac_control_port_agent:cp_valid
	wire  [109:0] cmd_mux_src_data;                                                             // cmd_mux:src_data -> tse_mac_control_port_agent:cp_data
	wire          cmd_mux_src_ready;                                                            // tse_mac_control_port_agent:cp_ready -> cmd_mux:src_ready
	wire    [8:0] cmd_mux_src_channel;                                                          // cmd_mux:src_channel -> tse_mac_control_port_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                    // cmd_mux:src_startofpacket -> tse_mac_control_port_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                      // cmd_mux:src_endofpacket -> tse_mac_control_port_agent:cp_endofpacket
	wire   [31:0] sgdma_tx_csr_agent_m0_readdata;                                               // sgdma_tx_csr_translator:uav_readdata -> sgdma_tx_csr_agent:m0_readdata
	wire          sgdma_tx_csr_agent_m0_waitrequest;                                            // sgdma_tx_csr_translator:uav_waitrequest -> sgdma_tx_csr_agent:m0_waitrequest
	wire          sgdma_tx_csr_agent_m0_debugaccess;                                            // sgdma_tx_csr_agent:m0_debugaccess -> sgdma_tx_csr_translator:uav_debugaccess
	wire   [31:0] sgdma_tx_csr_agent_m0_address;                                                // sgdma_tx_csr_agent:m0_address -> sgdma_tx_csr_translator:uav_address
	wire    [3:0] sgdma_tx_csr_agent_m0_byteenable;                                             // sgdma_tx_csr_agent:m0_byteenable -> sgdma_tx_csr_translator:uav_byteenable
	wire          sgdma_tx_csr_agent_m0_read;                                                   // sgdma_tx_csr_agent:m0_read -> sgdma_tx_csr_translator:uav_read
	wire          sgdma_tx_csr_agent_m0_readdatavalid;                                          // sgdma_tx_csr_translator:uav_readdatavalid -> sgdma_tx_csr_agent:m0_readdatavalid
	wire          sgdma_tx_csr_agent_m0_lock;                                                   // sgdma_tx_csr_agent:m0_lock -> sgdma_tx_csr_translator:uav_lock
	wire   [31:0] sgdma_tx_csr_agent_m0_writedata;                                              // sgdma_tx_csr_agent:m0_writedata -> sgdma_tx_csr_translator:uav_writedata
	wire          sgdma_tx_csr_agent_m0_write;                                                  // sgdma_tx_csr_agent:m0_write -> sgdma_tx_csr_translator:uav_write
	wire    [2:0] sgdma_tx_csr_agent_m0_burstcount;                                             // sgdma_tx_csr_agent:m0_burstcount -> sgdma_tx_csr_translator:uav_burstcount
	wire          sgdma_tx_csr_agent_rf_source_valid;                                           // sgdma_tx_csr_agent:rf_source_valid -> sgdma_tx_csr_agent_rsp_fifo:in_valid
	wire  [110:0] sgdma_tx_csr_agent_rf_source_data;                                            // sgdma_tx_csr_agent:rf_source_data -> sgdma_tx_csr_agent_rsp_fifo:in_data
	wire          sgdma_tx_csr_agent_rf_source_ready;                                           // sgdma_tx_csr_agent_rsp_fifo:in_ready -> sgdma_tx_csr_agent:rf_source_ready
	wire          sgdma_tx_csr_agent_rf_source_startofpacket;                                   // sgdma_tx_csr_agent:rf_source_startofpacket -> sgdma_tx_csr_agent_rsp_fifo:in_startofpacket
	wire          sgdma_tx_csr_agent_rf_source_endofpacket;                                     // sgdma_tx_csr_agent:rf_source_endofpacket -> sgdma_tx_csr_agent_rsp_fifo:in_endofpacket
	wire          sgdma_tx_csr_agent_rsp_fifo_out_valid;                                        // sgdma_tx_csr_agent_rsp_fifo:out_valid -> sgdma_tx_csr_agent:rf_sink_valid
	wire  [110:0] sgdma_tx_csr_agent_rsp_fifo_out_data;                                         // sgdma_tx_csr_agent_rsp_fifo:out_data -> sgdma_tx_csr_agent:rf_sink_data
	wire          sgdma_tx_csr_agent_rsp_fifo_out_ready;                                        // sgdma_tx_csr_agent:rf_sink_ready -> sgdma_tx_csr_agent_rsp_fifo:out_ready
	wire          sgdma_tx_csr_agent_rsp_fifo_out_startofpacket;                                // sgdma_tx_csr_agent_rsp_fifo:out_startofpacket -> sgdma_tx_csr_agent:rf_sink_startofpacket
	wire          sgdma_tx_csr_agent_rsp_fifo_out_endofpacket;                                  // sgdma_tx_csr_agent_rsp_fifo:out_endofpacket -> sgdma_tx_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                        // cmd_mux_001:src_valid -> sgdma_tx_csr_agent:cp_valid
	wire  [109:0] cmd_mux_001_src_data;                                                         // cmd_mux_001:src_data -> sgdma_tx_csr_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                        // sgdma_tx_csr_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [8:0] cmd_mux_001_src_channel;                                                      // cmd_mux_001:src_channel -> sgdma_tx_csr_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                // cmd_mux_001:src_startofpacket -> sgdma_tx_csr_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                  // cmd_mux_001:src_endofpacket -> sgdma_tx_csr_agent:cp_endofpacket
	wire   [31:0] sgdma_rx_csr_agent_m0_readdata;                                               // sgdma_rx_csr_translator:uav_readdata -> sgdma_rx_csr_agent:m0_readdata
	wire          sgdma_rx_csr_agent_m0_waitrequest;                                            // sgdma_rx_csr_translator:uav_waitrequest -> sgdma_rx_csr_agent:m0_waitrequest
	wire          sgdma_rx_csr_agent_m0_debugaccess;                                            // sgdma_rx_csr_agent:m0_debugaccess -> sgdma_rx_csr_translator:uav_debugaccess
	wire   [31:0] sgdma_rx_csr_agent_m0_address;                                                // sgdma_rx_csr_agent:m0_address -> sgdma_rx_csr_translator:uav_address
	wire    [3:0] sgdma_rx_csr_agent_m0_byteenable;                                             // sgdma_rx_csr_agent:m0_byteenable -> sgdma_rx_csr_translator:uav_byteenable
	wire          sgdma_rx_csr_agent_m0_read;                                                   // sgdma_rx_csr_agent:m0_read -> sgdma_rx_csr_translator:uav_read
	wire          sgdma_rx_csr_agent_m0_readdatavalid;                                          // sgdma_rx_csr_translator:uav_readdatavalid -> sgdma_rx_csr_agent:m0_readdatavalid
	wire          sgdma_rx_csr_agent_m0_lock;                                                   // sgdma_rx_csr_agent:m0_lock -> sgdma_rx_csr_translator:uav_lock
	wire   [31:0] sgdma_rx_csr_agent_m0_writedata;                                              // sgdma_rx_csr_agent:m0_writedata -> sgdma_rx_csr_translator:uav_writedata
	wire          sgdma_rx_csr_agent_m0_write;                                                  // sgdma_rx_csr_agent:m0_write -> sgdma_rx_csr_translator:uav_write
	wire    [2:0] sgdma_rx_csr_agent_m0_burstcount;                                             // sgdma_rx_csr_agent:m0_burstcount -> sgdma_rx_csr_translator:uav_burstcount
	wire          sgdma_rx_csr_agent_rf_source_valid;                                           // sgdma_rx_csr_agent:rf_source_valid -> sgdma_rx_csr_agent_rsp_fifo:in_valid
	wire  [110:0] sgdma_rx_csr_agent_rf_source_data;                                            // sgdma_rx_csr_agent:rf_source_data -> sgdma_rx_csr_agent_rsp_fifo:in_data
	wire          sgdma_rx_csr_agent_rf_source_ready;                                           // sgdma_rx_csr_agent_rsp_fifo:in_ready -> sgdma_rx_csr_agent:rf_source_ready
	wire          sgdma_rx_csr_agent_rf_source_startofpacket;                                   // sgdma_rx_csr_agent:rf_source_startofpacket -> sgdma_rx_csr_agent_rsp_fifo:in_startofpacket
	wire          sgdma_rx_csr_agent_rf_source_endofpacket;                                     // sgdma_rx_csr_agent:rf_source_endofpacket -> sgdma_rx_csr_agent_rsp_fifo:in_endofpacket
	wire          sgdma_rx_csr_agent_rsp_fifo_out_valid;                                        // sgdma_rx_csr_agent_rsp_fifo:out_valid -> sgdma_rx_csr_agent:rf_sink_valid
	wire  [110:0] sgdma_rx_csr_agent_rsp_fifo_out_data;                                         // sgdma_rx_csr_agent_rsp_fifo:out_data -> sgdma_rx_csr_agent:rf_sink_data
	wire          sgdma_rx_csr_agent_rsp_fifo_out_ready;                                        // sgdma_rx_csr_agent:rf_sink_ready -> sgdma_rx_csr_agent_rsp_fifo:out_ready
	wire          sgdma_rx_csr_agent_rsp_fifo_out_startofpacket;                                // sgdma_rx_csr_agent_rsp_fifo:out_startofpacket -> sgdma_rx_csr_agent:rf_sink_startofpacket
	wire          sgdma_rx_csr_agent_rsp_fifo_out_endofpacket;                                  // sgdma_rx_csr_agent_rsp_fifo:out_endofpacket -> sgdma_rx_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                        // cmd_mux_002:src_valid -> sgdma_rx_csr_agent:cp_valid
	wire  [109:0] cmd_mux_002_src_data;                                                         // cmd_mux_002:src_data -> sgdma_rx_csr_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                        // sgdma_rx_csr_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [8:0] cmd_mux_002_src_channel;                                                      // cmd_mux_002:src_channel -> sgdma_rx_csr_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                // cmd_mux_002:src_startofpacket -> sgdma_rx_csr_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                  // cmd_mux_002:src_endofpacket -> sgdma_rx_csr_agent:cp_endofpacket
	wire   [31:0] cpu_debug_mem_slave_agent_m0_readdata;                                        // cpu_debug_mem_slave_translator:uav_readdata -> cpu_debug_mem_slave_agent:m0_readdata
	wire          cpu_debug_mem_slave_agent_m0_waitrequest;                                     // cpu_debug_mem_slave_translator:uav_waitrequest -> cpu_debug_mem_slave_agent:m0_waitrequest
	wire          cpu_debug_mem_slave_agent_m0_debugaccess;                                     // cpu_debug_mem_slave_agent:m0_debugaccess -> cpu_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] cpu_debug_mem_slave_agent_m0_address;                                         // cpu_debug_mem_slave_agent:m0_address -> cpu_debug_mem_slave_translator:uav_address
	wire    [3:0] cpu_debug_mem_slave_agent_m0_byteenable;                                      // cpu_debug_mem_slave_agent:m0_byteenable -> cpu_debug_mem_slave_translator:uav_byteenable
	wire          cpu_debug_mem_slave_agent_m0_read;                                            // cpu_debug_mem_slave_agent:m0_read -> cpu_debug_mem_slave_translator:uav_read
	wire          cpu_debug_mem_slave_agent_m0_readdatavalid;                                   // cpu_debug_mem_slave_translator:uav_readdatavalid -> cpu_debug_mem_slave_agent:m0_readdatavalid
	wire          cpu_debug_mem_slave_agent_m0_lock;                                            // cpu_debug_mem_slave_agent:m0_lock -> cpu_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpu_debug_mem_slave_agent_m0_writedata;                                       // cpu_debug_mem_slave_agent:m0_writedata -> cpu_debug_mem_slave_translator:uav_writedata
	wire          cpu_debug_mem_slave_agent_m0_write;                                           // cpu_debug_mem_slave_agent:m0_write -> cpu_debug_mem_slave_translator:uav_write
	wire    [2:0] cpu_debug_mem_slave_agent_m0_burstcount;                                      // cpu_debug_mem_slave_agent:m0_burstcount -> cpu_debug_mem_slave_translator:uav_burstcount
	wire          cpu_debug_mem_slave_agent_rf_source_valid;                                    // cpu_debug_mem_slave_agent:rf_source_valid -> cpu_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [110:0] cpu_debug_mem_slave_agent_rf_source_data;                                     // cpu_debug_mem_slave_agent:rf_source_data -> cpu_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpu_debug_mem_slave_agent_rf_source_ready;                                    // cpu_debug_mem_slave_agent_rsp_fifo:in_ready -> cpu_debug_mem_slave_agent:rf_source_ready
	wire          cpu_debug_mem_slave_agent_rf_source_startofpacket;                            // cpu_debug_mem_slave_agent:rf_source_startofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpu_debug_mem_slave_agent_rf_source_endofpacket;                              // cpu_debug_mem_slave_agent:rf_source_endofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_valid;                                 // cpu_debug_mem_slave_agent_rsp_fifo:out_valid -> cpu_debug_mem_slave_agent:rf_sink_valid
	wire  [110:0] cpu_debug_mem_slave_agent_rsp_fifo_out_data;                                  // cpu_debug_mem_slave_agent_rsp_fifo:out_data -> cpu_debug_mem_slave_agent:rf_sink_data
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_ready;                                 // cpu_debug_mem_slave_agent:rf_sink_ready -> cpu_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                         // cpu_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> cpu_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                           // cpu_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> cpu_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                        // cmd_mux_003:src_valid -> cpu_debug_mem_slave_agent:cp_valid
	wire  [109:0] cmd_mux_003_src_data;                                                         // cmd_mux_003:src_data -> cpu_debug_mem_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                        // cpu_debug_mem_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [8:0] cmd_mux_003_src_channel;                                                      // cmd_mux_003:src_channel -> cpu_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                // cmd_mux_003:src_startofpacket -> cpu_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                  // cmd_mux_003:src_endofpacket -> cpu_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] pb_cpu_to_io_s0_agent_m0_readdata;                                            // pb_cpu_to_io_s0_translator:uav_readdata -> pb_cpu_to_io_s0_agent:m0_readdata
	wire          pb_cpu_to_io_s0_agent_m0_waitrequest;                                         // pb_cpu_to_io_s0_translator:uav_waitrequest -> pb_cpu_to_io_s0_agent:m0_waitrequest
	wire          pb_cpu_to_io_s0_agent_m0_debugaccess;                                         // pb_cpu_to_io_s0_agent:m0_debugaccess -> pb_cpu_to_io_s0_translator:uav_debugaccess
	wire   [31:0] pb_cpu_to_io_s0_agent_m0_address;                                             // pb_cpu_to_io_s0_agent:m0_address -> pb_cpu_to_io_s0_translator:uav_address
	wire    [3:0] pb_cpu_to_io_s0_agent_m0_byteenable;                                          // pb_cpu_to_io_s0_agent:m0_byteenable -> pb_cpu_to_io_s0_translator:uav_byteenable
	wire          pb_cpu_to_io_s0_agent_m0_read;                                                // pb_cpu_to_io_s0_agent:m0_read -> pb_cpu_to_io_s0_translator:uav_read
	wire          pb_cpu_to_io_s0_agent_m0_readdatavalid;                                       // pb_cpu_to_io_s0_translator:uav_readdatavalid -> pb_cpu_to_io_s0_agent:m0_readdatavalid
	wire          pb_cpu_to_io_s0_agent_m0_lock;                                                // pb_cpu_to_io_s0_agent:m0_lock -> pb_cpu_to_io_s0_translator:uav_lock
	wire   [31:0] pb_cpu_to_io_s0_agent_m0_writedata;                                           // pb_cpu_to_io_s0_agent:m0_writedata -> pb_cpu_to_io_s0_translator:uav_writedata
	wire          pb_cpu_to_io_s0_agent_m0_write;                                               // pb_cpu_to_io_s0_agent:m0_write -> pb_cpu_to_io_s0_translator:uav_write
	wire    [2:0] pb_cpu_to_io_s0_agent_m0_burstcount;                                          // pb_cpu_to_io_s0_agent:m0_burstcount -> pb_cpu_to_io_s0_translator:uav_burstcount
	wire          pb_cpu_to_io_s0_agent_rf_source_valid;                                        // pb_cpu_to_io_s0_agent:rf_source_valid -> pb_cpu_to_io_s0_agent_rsp_fifo:in_valid
	wire  [110:0] pb_cpu_to_io_s0_agent_rf_source_data;                                         // pb_cpu_to_io_s0_agent:rf_source_data -> pb_cpu_to_io_s0_agent_rsp_fifo:in_data
	wire          pb_cpu_to_io_s0_agent_rf_source_ready;                                        // pb_cpu_to_io_s0_agent_rsp_fifo:in_ready -> pb_cpu_to_io_s0_agent:rf_source_ready
	wire          pb_cpu_to_io_s0_agent_rf_source_startofpacket;                                // pb_cpu_to_io_s0_agent:rf_source_startofpacket -> pb_cpu_to_io_s0_agent_rsp_fifo:in_startofpacket
	wire          pb_cpu_to_io_s0_agent_rf_source_endofpacket;                                  // pb_cpu_to_io_s0_agent:rf_source_endofpacket -> pb_cpu_to_io_s0_agent_rsp_fifo:in_endofpacket
	wire          pb_cpu_to_io_s0_agent_rsp_fifo_out_valid;                                     // pb_cpu_to_io_s0_agent_rsp_fifo:out_valid -> pb_cpu_to_io_s0_agent:rf_sink_valid
	wire  [110:0] pb_cpu_to_io_s0_agent_rsp_fifo_out_data;                                      // pb_cpu_to_io_s0_agent_rsp_fifo:out_data -> pb_cpu_to_io_s0_agent:rf_sink_data
	wire          pb_cpu_to_io_s0_agent_rsp_fifo_out_ready;                                     // pb_cpu_to_io_s0_agent:rf_sink_ready -> pb_cpu_to_io_s0_agent_rsp_fifo:out_ready
	wire          pb_cpu_to_io_s0_agent_rsp_fifo_out_startofpacket;                             // pb_cpu_to_io_s0_agent_rsp_fifo:out_startofpacket -> pb_cpu_to_io_s0_agent:rf_sink_startofpacket
	wire          pb_cpu_to_io_s0_agent_rsp_fifo_out_endofpacket;                               // pb_cpu_to_io_s0_agent_rsp_fifo:out_endofpacket -> pb_cpu_to_io_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                        // cmd_mux_004:src_valid -> pb_cpu_to_io_s0_agent:cp_valid
	wire  [109:0] cmd_mux_004_src_data;                                                         // cmd_mux_004:src_data -> pb_cpu_to_io_s0_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                        // pb_cpu_to_io_s0_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [8:0] cmd_mux_004_src_channel;                                                      // cmd_mux_004:src_channel -> pb_cpu_to_io_s0_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                // cmd_mux_004:src_startofpacket -> pb_cpu_to_io_s0_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                  // cmd_mux_004:src_endofpacket -> pb_cpu_to_io_s0_agent:cp_endofpacket
	wire   [31:0] onchip_ram_s1_agent_m0_readdata;                                              // onchip_ram_s1_translator:uav_readdata -> onchip_ram_s1_agent:m0_readdata
	wire          onchip_ram_s1_agent_m0_waitrequest;                                           // onchip_ram_s1_translator:uav_waitrequest -> onchip_ram_s1_agent:m0_waitrequest
	wire          onchip_ram_s1_agent_m0_debugaccess;                                           // onchip_ram_s1_agent:m0_debugaccess -> onchip_ram_s1_translator:uav_debugaccess
	wire   [31:0] onchip_ram_s1_agent_m0_address;                                               // onchip_ram_s1_agent:m0_address -> onchip_ram_s1_translator:uav_address
	wire    [3:0] onchip_ram_s1_agent_m0_byteenable;                                            // onchip_ram_s1_agent:m0_byteenable -> onchip_ram_s1_translator:uav_byteenable
	wire          onchip_ram_s1_agent_m0_read;                                                  // onchip_ram_s1_agent:m0_read -> onchip_ram_s1_translator:uav_read
	wire          onchip_ram_s1_agent_m0_readdatavalid;                                         // onchip_ram_s1_translator:uav_readdatavalid -> onchip_ram_s1_agent:m0_readdatavalid
	wire          onchip_ram_s1_agent_m0_lock;                                                  // onchip_ram_s1_agent:m0_lock -> onchip_ram_s1_translator:uav_lock
	wire   [31:0] onchip_ram_s1_agent_m0_writedata;                                             // onchip_ram_s1_agent:m0_writedata -> onchip_ram_s1_translator:uav_writedata
	wire          onchip_ram_s1_agent_m0_write;                                                 // onchip_ram_s1_agent:m0_write -> onchip_ram_s1_translator:uav_write
	wire    [2:0] onchip_ram_s1_agent_m0_burstcount;                                            // onchip_ram_s1_agent:m0_burstcount -> onchip_ram_s1_translator:uav_burstcount
	wire          onchip_ram_s1_agent_rf_source_valid;                                          // onchip_ram_s1_agent:rf_source_valid -> onchip_ram_s1_agent_rsp_fifo:in_valid
	wire  [110:0] onchip_ram_s1_agent_rf_source_data;                                           // onchip_ram_s1_agent:rf_source_data -> onchip_ram_s1_agent_rsp_fifo:in_data
	wire          onchip_ram_s1_agent_rf_source_ready;                                          // onchip_ram_s1_agent_rsp_fifo:in_ready -> onchip_ram_s1_agent:rf_source_ready
	wire          onchip_ram_s1_agent_rf_source_startofpacket;                                  // onchip_ram_s1_agent:rf_source_startofpacket -> onchip_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_ram_s1_agent_rf_source_endofpacket;                                    // onchip_ram_s1_agent:rf_source_endofpacket -> onchip_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_ram_s1_agent_rsp_fifo_out_valid;                                       // onchip_ram_s1_agent_rsp_fifo:out_valid -> onchip_ram_s1_agent:rf_sink_valid
	wire  [110:0] onchip_ram_s1_agent_rsp_fifo_out_data;                                        // onchip_ram_s1_agent_rsp_fifo:out_data -> onchip_ram_s1_agent:rf_sink_data
	wire          onchip_ram_s1_agent_rsp_fifo_out_ready;                                       // onchip_ram_s1_agent:rf_sink_ready -> onchip_ram_s1_agent_rsp_fifo:out_ready
	wire          onchip_ram_s1_agent_rsp_fifo_out_startofpacket;                               // onchip_ram_s1_agent_rsp_fifo:out_startofpacket -> onchip_ram_s1_agent:rf_sink_startofpacket
	wire          onchip_ram_s1_agent_rsp_fifo_out_endofpacket;                                 // onchip_ram_s1_agent_rsp_fifo:out_endofpacket -> onchip_ram_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                        // cmd_mux_005:src_valid -> onchip_ram_s1_agent:cp_valid
	wire  [109:0] cmd_mux_005_src_data;                                                         // cmd_mux_005:src_data -> onchip_ram_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                        // onchip_ram_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [8:0] cmd_mux_005_src_channel;                                                      // cmd_mux_005:src_channel -> onchip_ram_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                // cmd_mux_005:src_startofpacket -> onchip_ram_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                  // cmd_mux_005:src_endofpacket -> onchip_ram_s1_agent:cp_endofpacket
	wire   [31:0] descriptor_memory_s1_agent_m0_readdata;                                       // descriptor_memory_s1_translator:uav_readdata -> descriptor_memory_s1_agent:m0_readdata
	wire          descriptor_memory_s1_agent_m0_waitrequest;                                    // descriptor_memory_s1_translator:uav_waitrequest -> descriptor_memory_s1_agent:m0_waitrequest
	wire          descriptor_memory_s1_agent_m0_debugaccess;                                    // descriptor_memory_s1_agent:m0_debugaccess -> descriptor_memory_s1_translator:uav_debugaccess
	wire   [31:0] descriptor_memory_s1_agent_m0_address;                                        // descriptor_memory_s1_agent:m0_address -> descriptor_memory_s1_translator:uav_address
	wire    [3:0] descriptor_memory_s1_agent_m0_byteenable;                                     // descriptor_memory_s1_agent:m0_byteenable -> descriptor_memory_s1_translator:uav_byteenable
	wire          descriptor_memory_s1_agent_m0_read;                                           // descriptor_memory_s1_agent:m0_read -> descriptor_memory_s1_translator:uav_read
	wire          descriptor_memory_s1_agent_m0_readdatavalid;                                  // descriptor_memory_s1_translator:uav_readdatavalid -> descriptor_memory_s1_agent:m0_readdatavalid
	wire          descriptor_memory_s1_agent_m0_lock;                                           // descriptor_memory_s1_agent:m0_lock -> descriptor_memory_s1_translator:uav_lock
	wire   [31:0] descriptor_memory_s1_agent_m0_writedata;                                      // descriptor_memory_s1_agent:m0_writedata -> descriptor_memory_s1_translator:uav_writedata
	wire          descriptor_memory_s1_agent_m0_write;                                          // descriptor_memory_s1_agent:m0_write -> descriptor_memory_s1_translator:uav_write
	wire    [2:0] descriptor_memory_s1_agent_m0_burstcount;                                     // descriptor_memory_s1_agent:m0_burstcount -> descriptor_memory_s1_translator:uav_burstcount
	wire          descriptor_memory_s1_agent_rf_source_valid;                                   // descriptor_memory_s1_agent:rf_source_valid -> descriptor_memory_s1_agent_rsp_fifo:in_valid
	wire  [110:0] descriptor_memory_s1_agent_rf_source_data;                                    // descriptor_memory_s1_agent:rf_source_data -> descriptor_memory_s1_agent_rsp_fifo:in_data
	wire          descriptor_memory_s1_agent_rf_source_ready;                                   // descriptor_memory_s1_agent_rsp_fifo:in_ready -> descriptor_memory_s1_agent:rf_source_ready
	wire          descriptor_memory_s1_agent_rf_source_startofpacket;                           // descriptor_memory_s1_agent:rf_source_startofpacket -> descriptor_memory_s1_agent_rsp_fifo:in_startofpacket
	wire          descriptor_memory_s1_agent_rf_source_endofpacket;                             // descriptor_memory_s1_agent:rf_source_endofpacket -> descriptor_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          descriptor_memory_s1_agent_rsp_fifo_out_valid;                                // descriptor_memory_s1_agent_rsp_fifo:out_valid -> descriptor_memory_s1_agent:rf_sink_valid
	wire  [110:0] descriptor_memory_s1_agent_rsp_fifo_out_data;                                 // descriptor_memory_s1_agent_rsp_fifo:out_data -> descriptor_memory_s1_agent:rf_sink_data
	wire          descriptor_memory_s1_agent_rsp_fifo_out_ready;                                // descriptor_memory_s1_agent:rf_sink_ready -> descriptor_memory_s1_agent_rsp_fifo:out_ready
	wire          descriptor_memory_s1_agent_rsp_fifo_out_startofpacket;                        // descriptor_memory_s1_agent_rsp_fifo:out_startofpacket -> descriptor_memory_s1_agent:rf_sink_startofpacket
	wire          descriptor_memory_s1_agent_rsp_fifo_out_endofpacket;                          // descriptor_memory_s1_agent_rsp_fifo:out_endofpacket -> descriptor_memory_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                        // cmd_mux_006:src_valid -> descriptor_memory_s1_agent:cp_valid
	wire  [109:0] cmd_mux_006_src_data;                                                         // cmd_mux_006:src_data -> descriptor_memory_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                        // descriptor_memory_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire    [8:0] cmd_mux_006_src_channel;                                                      // cmd_mux_006:src_channel -> descriptor_memory_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                // cmd_mux_006:src_startofpacket -> descriptor_memory_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                  // cmd_mux_006:src_endofpacket -> descriptor_memory_s1_agent:cp_endofpacket
	wire   [31:0] onchip_ram_s2_agent_m0_readdata;                                              // onchip_ram_s2_translator:uav_readdata -> onchip_ram_s2_agent:m0_readdata
	wire          onchip_ram_s2_agent_m0_waitrequest;                                           // onchip_ram_s2_translator:uav_waitrequest -> onchip_ram_s2_agent:m0_waitrequest
	wire          onchip_ram_s2_agent_m0_debugaccess;                                           // onchip_ram_s2_agent:m0_debugaccess -> onchip_ram_s2_translator:uav_debugaccess
	wire   [31:0] onchip_ram_s2_agent_m0_address;                                               // onchip_ram_s2_agent:m0_address -> onchip_ram_s2_translator:uav_address
	wire    [3:0] onchip_ram_s2_agent_m0_byteenable;                                            // onchip_ram_s2_agent:m0_byteenable -> onchip_ram_s2_translator:uav_byteenable
	wire          onchip_ram_s2_agent_m0_read;                                                  // onchip_ram_s2_agent:m0_read -> onchip_ram_s2_translator:uav_read
	wire          onchip_ram_s2_agent_m0_readdatavalid;                                         // onchip_ram_s2_translator:uav_readdatavalid -> onchip_ram_s2_agent:m0_readdatavalid
	wire          onchip_ram_s2_agent_m0_lock;                                                  // onchip_ram_s2_agent:m0_lock -> onchip_ram_s2_translator:uav_lock
	wire   [31:0] onchip_ram_s2_agent_m0_writedata;                                             // onchip_ram_s2_agent:m0_writedata -> onchip_ram_s2_translator:uav_writedata
	wire          onchip_ram_s2_agent_m0_write;                                                 // onchip_ram_s2_agent:m0_write -> onchip_ram_s2_translator:uav_write
	wire    [2:0] onchip_ram_s2_agent_m0_burstcount;                                            // onchip_ram_s2_agent:m0_burstcount -> onchip_ram_s2_translator:uav_burstcount
	wire          onchip_ram_s2_agent_rf_source_valid;                                          // onchip_ram_s2_agent:rf_source_valid -> onchip_ram_s2_agent_rsp_fifo:in_valid
	wire  [110:0] onchip_ram_s2_agent_rf_source_data;                                           // onchip_ram_s2_agent:rf_source_data -> onchip_ram_s2_agent_rsp_fifo:in_data
	wire          onchip_ram_s2_agent_rf_source_ready;                                          // onchip_ram_s2_agent_rsp_fifo:in_ready -> onchip_ram_s2_agent:rf_source_ready
	wire          onchip_ram_s2_agent_rf_source_startofpacket;                                  // onchip_ram_s2_agent:rf_source_startofpacket -> onchip_ram_s2_agent_rsp_fifo:in_startofpacket
	wire          onchip_ram_s2_agent_rf_source_endofpacket;                                    // onchip_ram_s2_agent:rf_source_endofpacket -> onchip_ram_s2_agent_rsp_fifo:in_endofpacket
	wire          onchip_ram_s2_agent_rsp_fifo_out_valid;                                       // onchip_ram_s2_agent_rsp_fifo:out_valid -> onchip_ram_s2_agent:rf_sink_valid
	wire  [110:0] onchip_ram_s2_agent_rsp_fifo_out_data;                                        // onchip_ram_s2_agent_rsp_fifo:out_data -> onchip_ram_s2_agent:rf_sink_data
	wire          onchip_ram_s2_agent_rsp_fifo_out_ready;                                       // onchip_ram_s2_agent:rf_sink_ready -> onchip_ram_s2_agent_rsp_fifo:out_ready
	wire          onchip_ram_s2_agent_rsp_fifo_out_startofpacket;                               // onchip_ram_s2_agent_rsp_fifo:out_startofpacket -> onchip_ram_s2_agent:rf_sink_startofpacket
	wire          onchip_ram_s2_agent_rsp_fifo_out_endofpacket;                                 // onchip_ram_s2_agent_rsp_fifo:out_endofpacket -> onchip_ram_s2_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                        // cmd_mux_007:src_valid -> onchip_ram_s2_agent:cp_valid
	wire  [109:0] cmd_mux_007_src_data;                                                         // cmd_mux_007:src_data -> onchip_ram_s2_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                        // onchip_ram_s2_agent:cp_ready -> cmd_mux_007:src_ready
	wire    [8:0] cmd_mux_007_src_channel;                                                      // cmd_mux_007:src_channel -> onchip_ram_s2_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                // cmd_mux_007:src_startofpacket -> onchip_ram_s2_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                  // cmd_mux_007:src_endofpacket -> onchip_ram_s2_agent:cp_endofpacket
	wire   [15:0] ext_flash_uas_agent_m0_readdata;                                              // ext_flash_uas_translator:uav_readdata -> ext_flash_uas_agent:m0_readdata
	wire          ext_flash_uas_agent_m0_waitrequest;                                           // ext_flash_uas_translator:uav_waitrequest -> ext_flash_uas_agent:m0_waitrequest
	wire          ext_flash_uas_agent_m0_debugaccess;                                           // ext_flash_uas_agent:m0_debugaccess -> ext_flash_uas_translator:uav_debugaccess
	wire   [31:0] ext_flash_uas_agent_m0_address;                                               // ext_flash_uas_agent:m0_address -> ext_flash_uas_translator:uav_address
	wire    [1:0] ext_flash_uas_agent_m0_byteenable;                                            // ext_flash_uas_agent:m0_byteenable -> ext_flash_uas_translator:uav_byteenable
	wire          ext_flash_uas_agent_m0_read;                                                  // ext_flash_uas_agent:m0_read -> ext_flash_uas_translator:uav_read
	wire          ext_flash_uas_agent_m0_readdatavalid;                                         // ext_flash_uas_translator:uav_readdatavalid -> ext_flash_uas_agent:m0_readdatavalid
	wire          ext_flash_uas_agent_m0_lock;                                                  // ext_flash_uas_agent:m0_lock -> ext_flash_uas_translator:uav_lock
	wire   [15:0] ext_flash_uas_agent_m0_writedata;                                             // ext_flash_uas_agent:m0_writedata -> ext_flash_uas_translator:uav_writedata
	wire          ext_flash_uas_agent_m0_write;                                                 // ext_flash_uas_agent:m0_write -> ext_flash_uas_translator:uav_write
	wire    [1:0] ext_flash_uas_agent_m0_burstcount;                                            // ext_flash_uas_agent:m0_burstcount -> ext_flash_uas_translator:uav_burstcount
	wire          ext_flash_uas_agent_rf_source_valid;                                          // ext_flash_uas_agent:rf_source_valid -> ext_flash_uas_agent_rsp_fifo:in_valid
	wire   [92:0] ext_flash_uas_agent_rf_source_data;                                           // ext_flash_uas_agent:rf_source_data -> ext_flash_uas_agent_rsp_fifo:in_data
	wire          ext_flash_uas_agent_rf_source_ready;                                          // ext_flash_uas_agent_rsp_fifo:in_ready -> ext_flash_uas_agent:rf_source_ready
	wire          ext_flash_uas_agent_rf_source_startofpacket;                                  // ext_flash_uas_agent:rf_source_startofpacket -> ext_flash_uas_agent_rsp_fifo:in_startofpacket
	wire          ext_flash_uas_agent_rf_source_endofpacket;                                    // ext_flash_uas_agent:rf_source_endofpacket -> ext_flash_uas_agent_rsp_fifo:in_endofpacket
	wire          ext_flash_uas_agent_rsp_fifo_out_valid;                                       // ext_flash_uas_agent_rsp_fifo:out_valid -> ext_flash_uas_agent:rf_sink_valid
	wire   [92:0] ext_flash_uas_agent_rsp_fifo_out_data;                                        // ext_flash_uas_agent_rsp_fifo:out_data -> ext_flash_uas_agent:rf_sink_data
	wire          ext_flash_uas_agent_rsp_fifo_out_ready;                                       // ext_flash_uas_agent:rf_sink_ready -> ext_flash_uas_agent_rsp_fifo:out_ready
	wire          ext_flash_uas_agent_rsp_fifo_out_startofpacket;                               // ext_flash_uas_agent_rsp_fifo:out_startofpacket -> ext_flash_uas_agent:rf_sink_startofpacket
	wire          ext_flash_uas_agent_rsp_fifo_out_endofpacket;                                 // ext_flash_uas_agent_rsp_fifo:out_endofpacket -> ext_flash_uas_agent:rf_sink_endofpacket
	wire          ext_flash_uas_agent_rdata_fifo_src_valid;                                     // ext_flash_uas_agent:rdata_fifo_src_valid -> ext_flash_uas_agent_rdata_fifo:in_valid
	wire   [17:0] ext_flash_uas_agent_rdata_fifo_src_data;                                      // ext_flash_uas_agent:rdata_fifo_src_data -> ext_flash_uas_agent_rdata_fifo:in_data
	wire          ext_flash_uas_agent_rdata_fifo_src_ready;                                     // ext_flash_uas_agent_rdata_fifo:in_ready -> ext_flash_uas_agent:rdata_fifo_src_ready
	wire          cpu_data_master_agent_cp_valid;                                               // cpu_data_master_agent:cp_valid -> router:sink_valid
	wire  [109:0] cpu_data_master_agent_cp_data;                                                // cpu_data_master_agent:cp_data -> router:sink_data
	wire          cpu_data_master_agent_cp_ready;                                               // router:sink_ready -> cpu_data_master_agent:cp_ready
	wire          cpu_data_master_agent_cp_startofpacket;                                       // cpu_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cpu_data_master_agent_cp_endofpacket;                                         // cpu_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          cpu_instruction_master_agent_cp_valid;                                        // cpu_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [109:0] cpu_instruction_master_agent_cp_data;                                         // cpu_instruction_master_agent:cp_data -> router_001:sink_data
	wire          cpu_instruction_master_agent_cp_ready;                                        // router_001:sink_ready -> cpu_instruction_master_agent:cp_ready
	wire          cpu_instruction_master_agent_cp_startofpacket;                                // cpu_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_instruction_master_agent_cp_endofpacket;                                  // cpu_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          sgdma_tx_m_read_agent_cp_valid;                                               // sgdma_tx_m_read_agent:cp_valid -> router_002:sink_valid
	wire  [109:0] sgdma_tx_m_read_agent_cp_data;                                                // sgdma_tx_m_read_agent:cp_data -> router_002:sink_data
	wire          sgdma_tx_m_read_agent_cp_ready;                                               // router_002:sink_ready -> sgdma_tx_m_read_agent:cp_ready
	wire          sgdma_tx_m_read_agent_cp_startofpacket;                                       // sgdma_tx_m_read_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          sgdma_tx_m_read_agent_cp_endofpacket;                                         // sgdma_tx_m_read_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          sgdma_rx_m_write_agent_cp_valid;                                              // sgdma_rx_m_write_agent:cp_valid -> router_003:sink_valid
	wire  [109:0] sgdma_rx_m_write_agent_cp_data;                                               // sgdma_rx_m_write_agent:cp_data -> router_003:sink_data
	wire          sgdma_rx_m_write_agent_cp_ready;                                              // router_003:sink_ready -> sgdma_rx_m_write_agent:cp_ready
	wire          sgdma_rx_m_write_agent_cp_startofpacket;                                      // sgdma_rx_m_write_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          sgdma_rx_m_write_agent_cp_endofpacket;                                        // sgdma_rx_m_write_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                         // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [109:0] router_003_src_data;                                                          // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                         // cmd_demux_003:sink_ready -> router_003:src_ready
	wire    [8:0] router_003_src_channel;                                                       // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                 // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                   // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          sgdma_rx_descriptor_read_agent_cp_valid;                                      // sgdma_rx_descriptor_read_agent:cp_valid -> router_004:sink_valid
	wire  [109:0] sgdma_rx_descriptor_read_agent_cp_data;                                       // sgdma_rx_descriptor_read_agent:cp_data -> router_004:sink_data
	wire          sgdma_rx_descriptor_read_agent_cp_ready;                                      // router_004:sink_ready -> sgdma_rx_descriptor_read_agent:cp_ready
	wire          sgdma_rx_descriptor_read_agent_cp_startofpacket;                              // sgdma_rx_descriptor_read_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          sgdma_rx_descriptor_read_agent_cp_endofpacket;                                // sgdma_rx_descriptor_read_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                         // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [109:0] router_004_src_data;                                                          // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                         // cmd_demux_004:sink_ready -> router_004:src_ready
	wire    [8:0] router_004_src_channel;                                                       // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                 // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                   // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          sgdma_tx_descriptor_read_agent_cp_valid;                                      // sgdma_tx_descriptor_read_agent:cp_valid -> router_005:sink_valid
	wire  [109:0] sgdma_tx_descriptor_read_agent_cp_data;                                       // sgdma_tx_descriptor_read_agent:cp_data -> router_005:sink_data
	wire          sgdma_tx_descriptor_read_agent_cp_ready;                                      // router_005:sink_ready -> sgdma_tx_descriptor_read_agent:cp_ready
	wire          sgdma_tx_descriptor_read_agent_cp_startofpacket;                              // sgdma_tx_descriptor_read_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          sgdma_tx_descriptor_read_agent_cp_endofpacket;                                // sgdma_tx_descriptor_read_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                         // router_005:src_valid -> cmd_demux_005:sink_valid
	wire  [109:0] router_005_src_data;                                                          // router_005:src_data -> cmd_demux_005:sink_data
	wire          router_005_src_ready;                                                         // cmd_demux_005:sink_ready -> router_005:src_ready
	wire    [8:0] router_005_src_channel;                                                       // router_005:src_channel -> cmd_demux_005:sink_channel
	wire          router_005_src_startofpacket;                                                 // router_005:src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          router_005_src_endofpacket;                                                   // router_005:src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          sgdma_rx_descriptor_write_agent_cp_valid;                                     // sgdma_rx_descriptor_write_agent:cp_valid -> router_006:sink_valid
	wire  [109:0] sgdma_rx_descriptor_write_agent_cp_data;                                      // sgdma_rx_descriptor_write_agent:cp_data -> router_006:sink_data
	wire          sgdma_rx_descriptor_write_agent_cp_ready;                                     // router_006:sink_ready -> sgdma_rx_descriptor_write_agent:cp_ready
	wire          sgdma_rx_descriptor_write_agent_cp_startofpacket;                             // sgdma_rx_descriptor_write_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          sgdma_rx_descriptor_write_agent_cp_endofpacket;                               // sgdma_rx_descriptor_write_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                         // router_006:src_valid -> cmd_demux_006:sink_valid
	wire  [109:0] router_006_src_data;                                                          // router_006:src_data -> cmd_demux_006:sink_data
	wire          router_006_src_ready;                                                         // cmd_demux_006:sink_ready -> router_006:src_ready
	wire    [8:0] router_006_src_channel;                                                       // router_006:src_channel -> cmd_demux_006:sink_channel
	wire          router_006_src_startofpacket;                                                 // router_006:src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          router_006_src_endofpacket;                                                   // router_006:src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          sgdma_tx_descriptor_write_agent_cp_valid;                                     // sgdma_tx_descriptor_write_agent:cp_valid -> router_007:sink_valid
	wire  [109:0] sgdma_tx_descriptor_write_agent_cp_data;                                      // sgdma_tx_descriptor_write_agent:cp_data -> router_007:sink_data
	wire          sgdma_tx_descriptor_write_agent_cp_ready;                                     // router_007:sink_ready -> sgdma_tx_descriptor_write_agent:cp_ready
	wire          sgdma_tx_descriptor_write_agent_cp_startofpacket;                             // sgdma_tx_descriptor_write_agent:cp_startofpacket -> router_007:sink_startofpacket
	wire          sgdma_tx_descriptor_write_agent_cp_endofpacket;                               // sgdma_tx_descriptor_write_agent:cp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                         // router_007:src_valid -> cmd_demux_007:sink_valid
	wire  [109:0] router_007_src_data;                                                          // router_007:src_data -> cmd_demux_007:sink_data
	wire          router_007_src_ready;                                                         // cmd_demux_007:sink_ready -> router_007:src_ready
	wire    [8:0] router_007_src_channel;                                                       // router_007:src_channel -> cmd_demux_007:sink_channel
	wire          router_007_src_startofpacket;                                                 // router_007:src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          router_007_src_endofpacket;                                                   // router_007:src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          tse_mac_control_port_agent_rp_valid;                                          // tse_mac_control_port_agent:rp_valid -> router_008:sink_valid
	wire  [109:0] tse_mac_control_port_agent_rp_data;                                           // tse_mac_control_port_agent:rp_data -> router_008:sink_data
	wire          tse_mac_control_port_agent_rp_ready;                                          // router_008:sink_ready -> tse_mac_control_port_agent:rp_ready
	wire          tse_mac_control_port_agent_rp_startofpacket;                                  // tse_mac_control_port_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          tse_mac_control_port_agent_rp_endofpacket;                                    // tse_mac_control_port_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                         // router_008:src_valid -> rsp_demux:sink_valid
	wire  [109:0] router_008_src_data;                                                          // router_008:src_data -> rsp_demux:sink_data
	wire          router_008_src_ready;                                                         // rsp_demux:sink_ready -> router_008:src_ready
	wire    [8:0] router_008_src_channel;                                                       // router_008:src_channel -> rsp_demux:sink_channel
	wire          router_008_src_startofpacket;                                                 // router_008:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_008_src_endofpacket;                                                   // router_008:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sgdma_tx_csr_agent_rp_valid;                                                  // sgdma_tx_csr_agent:rp_valid -> router_009:sink_valid
	wire  [109:0] sgdma_tx_csr_agent_rp_data;                                                   // sgdma_tx_csr_agent:rp_data -> router_009:sink_data
	wire          sgdma_tx_csr_agent_rp_ready;                                                  // router_009:sink_ready -> sgdma_tx_csr_agent:rp_ready
	wire          sgdma_tx_csr_agent_rp_startofpacket;                                          // sgdma_tx_csr_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          sgdma_tx_csr_agent_rp_endofpacket;                                            // sgdma_tx_csr_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                         // router_009:src_valid -> rsp_demux_001:sink_valid
	wire  [109:0] router_009_src_data;                                                          // router_009:src_data -> rsp_demux_001:sink_data
	wire          router_009_src_ready;                                                         // rsp_demux_001:sink_ready -> router_009:src_ready
	wire    [8:0] router_009_src_channel;                                                       // router_009:src_channel -> rsp_demux_001:sink_channel
	wire          router_009_src_startofpacket;                                                 // router_009:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_009_src_endofpacket;                                                   // router_009:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          sgdma_rx_csr_agent_rp_valid;                                                  // sgdma_rx_csr_agent:rp_valid -> router_010:sink_valid
	wire  [109:0] sgdma_rx_csr_agent_rp_data;                                                   // sgdma_rx_csr_agent:rp_data -> router_010:sink_data
	wire          sgdma_rx_csr_agent_rp_ready;                                                  // router_010:sink_ready -> sgdma_rx_csr_agent:rp_ready
	wire          sgdma_rx_csr_agent_rp_startofpacket;                                          // sgdma_rx_csr_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          sgdma_rx_csr_agent_rp_endofpacket;                                            // sgdma_rx_csr_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                         // router_010:src_valid -> rsp_demux_002:sink_valid
	wire  [109:0] router_010_src_data;                                                          // router_010:src_data -> rsp_demux_002:sink_data
	wire          router_010_src_ready;                                                         // rsp_demux_002:sink_ready -> router_010:src_ready
	wire    [8:0] router_010_src_channel;                                                       // router_010:src_channel -> rsp_demux_002:sink_channel
	wire          router_010_src_startofpacket;                                                 // router_010:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_010_src_endofpacket;                                                   // router_010:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          cpu_debug_mem_slave_agent_rp_valid;                                           // cpu_debug_mem_slave_agent:rp_valid -> router_011:sink_valid
	wire  [109:0] cpu_debug_mem_slave_agent_rp_data;                                            // cpu_debug_mem_slave_agent:rp_data -> router_011:sink_data
	wire          cpu_debug_mem_slave_agent_rp_ready;                                           // router_011:sink_ready -> cpu_debug_mem_slave_agent:rp_ready
	wire          cpu_debug_mem_slave_agent_rp_startofpacket;                                   // cpu_debug_mem_slave_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          cpu_debug_mem_slave_agent_rp_endofpacket;                                     // cpu_debug_mem_slave_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                         // router_011:src_valid -> rsp_demux_003:sink_valid
	wire  [109:0] router_011_src_data;                                                          // router_011:src_data -> rsp_demux_003:sink_data
	wire          router_011_src_ready;                                                         // rsp_demux_003:sink_ready -> router_011:src_ready
	wire    [8:0] router_011_src_channel;                                                       // router_011:src_channel -> rsp_demux_003:sink_channel
	wire          router_011_src_startofpacket;                                                 // router_011:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_011_src_endofpacket;                                                   // router_011:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          pb_cpu_to_io_s0_agent_rp_valid;                                               // pb_cpu_to_io_s0_agent:rp_valid -> router_012:sink_valid
	wire  [109:0] pb_cpu_to_io_s0_agent_rp_data;                                                // pb_cpu_to_io_s0_agent:rp_data -> router_012:sink_data
	wire          pb_cpu_to_io_s0_agent_rp_ready;                                               // router_012:sink_ready -> pb_cpu_to_io_s0_agent:rp_ready
	wire          pb_cpu_to_io_s0_agent_rp_startofpacket;                                       // pb_cpu_to_io_s0_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          pb_cpu_to_io_s0_agent_rp_endofpacket;                                         // pb_cpu_to_io_s0_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                         // router_012:src_valid -> rsp_demux_004:sink_valid
	wire  [109:0] router_012_src_data;                                                          // router_012:src_data -> rsp_demux_004:sink_data
	wire          router_012_src_ready;                                                         // rsp_demux_004:sink_ready -> router_012:src_ready
	wire    [8:0] router_012_src_channel;                                                       // router_012:src_channel -> rsp_demux_004:sink_channel
	wire          router_012_src_startofpacket;                                                 // router_012:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_012_src_endofpacket;                                                   // router_012:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          onchip_ram_s1_agent_rp_valid;                                                 // onchip_ram_s1_agent:rp_valid -> router_013:sink_valid
	wire  [109:0] onchip_ram_s1_agent_rp_data;                                                  // onchip_ram_s1_agent:rp_data -> router_013:sink_data
	wire          onchip_ram_s1_agent_rp_ready;                                                 // router_013:sink_ready -> onchip_ram_s1_agent:rp_ready
	wire          onchip_ram_s1_agent_rp_startofpacket;                                         // onchip_ram_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          onchip_ram_s1_agent_rp_endofpacket;                                           // onchip_ram_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                         // router_013:src_valid -> rsp_demux_005:sink_valid
	wire  [109:0] router_013_src_data;                                                          // router_013:src_data -> rsp_demux_005:sink_data
	wire          router_013_src_ready;                                                         // rsp_demux_005:sink_ready -> router_013:src_ready
	wire    [8:0] router_013_src_channel;                                                       // router_013:src_channel -> rsp_demux_005:sink_channel
	wire          router_013_src_startofpacket;                                                 // router_013:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_013_src_endofpacket;                                                   // router_013:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          descriptor_memory_s1_agent_rp_valid;                                          // descriptor_memory_s1_agent:rp_valid -> router_014:sink_valid
	wire  [109:0] descriptor_memory_s1_agent_rp_data;                                           // descriptor_memory_s1_agent:rp_data -> router_014:sink_data
	wire          descriptor_memory_s1_agent_rp_ready;                                          // router_014:sink_ready -> descriptor_memory_s1_agent:rp_ready
	wire          descriptor_memory_s1_agent_rp_startofpacket;                                  // descriptor_memory_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          descriptor_memory_s1_agent_rp_endofpacket;                                    // descriptor_memory_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                         // router_014:src_valid -> rsp_demux_006:sink_valid
	wire  [109:0] router_014_src_data;                                                          // router_014:src_data -> rsp_demux_006:sink_data
	wire          router_014_src_ready;                                                         // rsp_demux_006:sink_ready -> router_014:src_ready
	wire    [8:0] router_014_src_channel;                                                       // router_014:src_channel -> rsp_demux_006:sink_channel
	wire          router_014_src_startofpacket;                                                 // router_014:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_014_src_endofpacket;                                                   // router_014:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          onchip_ram_s2_agent_rp_valid;                                                 // onchip_ram_s2_agent:rp_valid -> router_015:sink_valid
	wire  [109:0] onchip_ram_s2_agent_rp_data;                                                  // onchip_ram_s2_agent:rp_data -> router_015:sink_data
	wire          onchip_ram_s2_agent_rp_ready;                                                 // router_015:sink_ready -> onchip_ram_s2_agent:rp_ready
	wire          onchip_ram_s2_agent_rp_startofpacket;                                         // onchip_ram_s2_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          onchip_ram_s2_agent_rp_endofpacket;                                           // onchip_ram_s2_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                         // router_015:src_valid -> rsp_demux_007:sink_valid
	wire  [109:0] router_015_src_data;                                                          // router_015:src_data -> rsp_demux_007:sink_data
	wire          router_015_src_ready;                                                         // rsp_demux_007:sink_ready -> router_015:src_ready
	wire    [8:0] router_015_src_channel;                                                       // router_015:src_channel -> rsp_demux_007:sink_channel
	wire          router_015_src_startofpacket;                                                 // router_015:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_015_src_endofpacket;                                                   // router_015:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          ext_flash_uas_agent_rp_valid;                                                 // ext_flash_uas_agent:rp_valid -> router_016:sink_valid
	wire   [91:0] ext_flash_uas_agent_rp_data;                                                  // ext_flash_uas_agent:rp_data -> router_016:sink_data
	wire          ext_flash_uas_agent_rp_ready;                                                 // router_016:sink_ready -> ext_flash_uas_agent:rp_ready
	wire          ext_flash_uas_agent_rp_startofpacket;                                         // ext_flash_uas_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          ext_flash_uas_agent_rp_endofpacket;                                           // ext_flash_uas_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_src_valid;                                                             // router:src_valid -> cpu_data_master_limiter:cmd_sink_valid
	wire  [109:0] router_src_data;                                                              // router:src_data -> cpu_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                             // cpu_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [8:0] router_src_channel;                                                           // router:src_channel -> cpu_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                     // router:src_startofpacket -> cpu_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                       // router:src_endofpacket -> cpu_data_master_limiter:cmd_sink_endofpacket
	wire  [109:0] cpu_data_master_limiter_cmd_src_data;                                         // cpu_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          cpu_data_master_limiter_cmd_src_ready;                                        // cmd_demux:sink_ready -> cpu_data_master_limiter:cmd_src_ready
	wire    [8:0] cpu_data_master_limiter_cmd_src_channel;                                      // cpu_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          cpu_data_master_limiter_cmd_src_startofpacket;                                // cpu_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          cpu_data_master_limiter_cmd_src_endofpacket;                                  // cpu_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                            // rsp_mux:src_valid -> cpu_data_master_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_src_data;                                                             // rsp_mux:src_data -> cpu_data_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                            // cpu_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [8:0] rsp_mux_src_channel;                                                          // rsp_mux:src_channel -> cpu_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                    // rsp_mux:src_startofpacket -> cpu_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                      // rsp_mux:src_endofpacket -> cpu_data_master_limiter:rsp_sink_endofpacket
	wire          cpu_data_master_limiter_rsp_src_valid;                                        // cpu_data_master_limiter:rsp_src_valid -> cpu_data_master_agent:rp_valid
	wire  [109:0] cpu_data_master_limiter_rsp_src_data;                                         // cpu_data_master_limiter:rsp_src_data -> cpu_data_master_agent:rp_data
	wire          cpu_data_master_limiter_rsp_src_ready;                                        // cpu_data_master_agent:rp_ready -> cpu_data_master_limiter:rsp_src_ready
	wire    [8:0] cpu_data_master_limiter_rsp_src_channel;                                      // cpu_data_master_limiter:rsp_src_channel -> cpu_data_master_agent:rp_channel
	wire          cpu_data_master_limiter_rsp_src_startofpacket;                                // cpu_data_master_limiter:rsp_src_startofpacket -> cpu_data_master_agent:rp_startofpacket
	wire          cpu_data_master_limiter_rsp_src_endofpacket;                                  // cpu_data_master_limiter:rsp_src_endofpacket -> cpu_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                         // router_001:src_valid -> cpu_instruction_master_limiter:cmd_sink_valid
	wire  [109:0] router_001_src_data;                                                          // router_001:src_data -> cpu_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                         // cpu_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [8:0] router_001_src_channel;                                                       // router_001:src_channel -> cpu_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                 // router_001:src_startofpacket -> cpu_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                   // router_001:src_endofpacket -> cpu_instruction_master_limiter:cmd_sink_endofpacket
	wire  [109:0] cpu_instruction_master_limiter_cmd_src_data;                                  // cpu_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          cpu_instruction_master_limiter_cmd_src_ready;                                 // cmd_demux_001:sink_ready -> cpu_instruction_master_limiter:cmd_src_ready
	wire    [8:0] cpu_instruction_master_limiter_cmd_src_channel;                               // cpu_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          cpu_instruction_master_limiter_cmd_src_startofpacket;                         // cpu_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          cpu_instruction_master_limiter_cmd_src_endofpacket;                           // cpu_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                        // rsp_mux_001:src_valid -> cpu_instruction_master_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_001_src_data;                                                         // rsp_mux_001:src_data -> cpu_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                        // cpu_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [8:0] rsp_mux_001_src_channel;                                                      // rsp_mux_001:src_channel -> cpu_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                // rsp_mux_001:src_startofpacket -> cpu_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                  // rsp_mux_001:src_endofpacket -> cpu_instruction_master_limiter:rsp_sink_endofpacket
	wire          cpu_instruction_master_limiter_rsp_src_valid;                                 // cpu_instruction_master_limiter:rsp_src_valid -> cpu_instruction_master_agent:rp_valid
	wire  [109:0] cpu_instruction_master_limiter_rsp_src_data;                                  // cpu_instruction_master_limiter:rsp_src_data -> cpu_instruction_master_agent:rp_data
	wire          cpu_instruction_master_limiter_rsp_src_ready;                                 // cpu_instruction_master_agent:rp_ready -> cpu_instruction_master_limiter:rsp_src_ready
	wire    [8:0] cpu_instruction_master_limiter_rsp_src_channel;                               // cpu_instruction_master_limiter:rsp_src_channel -> cpu_instruction_master_agent:rp_channel
	wire          cpu_instruction_master_limiter_rsp_src_startofpacket;                         // cpu_instruction_master_limiter:rsp_src_startofpacket -> cpu_instruction_master_agent:rp_startofpacket
	wire          cpu_instruction_master_limiter_rsp_src_endofpacket;                           // cpu_instruction_master_limiter:rsp_src_endofpacket -> cpu_instruction_master_agent:rp_endofpacket
	wire          router_002_src_valid;                                                         // router_002:src_valid -> sgdma_tx_m_read_limiter:cmd_sink_valid
	wire  [109:0] router_002_src_data;                                                          // router_002:src_data -> sgdma_tx_m_read_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                         // sgdma_tx_m_read_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [8:0] router_002_src_channel;                                                       // router_002:src_channel -> sgdma_tx_m_read_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                 // router_002:src_startofpacket -> sgdma_tx_m_read_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                   // router_002:src_endofpacket -> sgdma_tx_m_read_limiter:cmd_sink_endofpacket
	wire  [109:0] sgdma_tx_m_read_limiter_cmd_src_data;                                         // sgdma_tx_m_read_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          sgdma_tx_m_read_limiter_cmd_src_ready;                                        // cmd_demux_002:sink_ready -> sgdma_tx_m_read_limiter:cmd_src_ready
	wire    [8:0] sgdma_tx_m_read_limiter_cmd_src_channel;                                      // sgdma_tx_m_read_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          sgdma_tx_m_read_limiter_cmd_src_startofpacket;                                // sgdma_tx_m_read_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          sgdma_tx_m_read_limiter_cmd_src_endofpacket;                                  // sgdma_tx_m_read_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                        // rsp_mux_002:src_valid -> sgdma_tx_m_read_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_002_src_data;                                                         // rsp_mux_002:src_data -> sgdma_tx_m_read_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                        // sgdma_tx_m_read_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire    [8:0] rsp_mux_002_src_channel;                                                      // rsp_mux_002:src_channel -> sgdma_tx_m_read_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                // rsp_mux_002:src_startofpacket -> sgdma_tx_m_read_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                  // rsp_mux_002:src_endofpacket -> sgdma_tx_m_read_limiter:rsp_sink_endofpacket
	wire          sgdma_tx_m_read_limiter_rsp_src_valid;                                        // sgdma_tx_m_read_limiter:rsp_src_valid -> sgdma_tx_m_read_agent:rp_valid
	wire  [109:0] sgdma_tx_m_read_limiter_rsp_src_data;                                         // sgdma_tx_m_read_limiter:rsp_src_data -> sgdma_tx_m_read_agent:rp_data
	wire          sgdma_tx_m_read_limiter_rsp_src_ready;                                        // sgdma_tx_m_read_agent:rp_ready -> sgdma_tx_m_read_limiter:rsp_src_ready
	wire    [8:0] sgdma_tx_m_read_limiter_rsp_src_channel;                                      // sgdma_tx_m_read_limiter:rsp_src_channel -> sgdma_tx_m_read_agent:rp_channel
	wire          sgdma_tx_m_read_limiter_rsp_src_startofpacket;                                // sgdma_tx_m_read_limiter:rsp_src_startofpacket -> sgdma_tx_m_read_agent:rp_startofpacket
	wire          sgdma_tx_m_read_limiter_rsp_src_endofpacket;                                  // sgdma_tx_m_read_limiter:rsp_src_endofpacket -> sgdma_tx_m_read_agent:rp_endofpacket
	wire          ext_flash_uas_burst_adapter_source0_valid;                                    // ext_flash_uas_burst_adapter:source0_valid -> ext_flash_uas_agent:cp_valid
	wire   [91:0] ext_flash_uas_burst_adapter_source0_data;                                     // ext_flash_uas_burst_adapter:source0_data -> ext_flash_uas_agent:cp_data
	wire          ext_flash_uas_burst_adapter_source0_ready;                                    // ext_flash_uas_agent:cp_ready -> ext_flash_uas_burst_adapter:source0_ready
	wire    [8:0] ext_flash_uas_burst_adapter_source0_channel;                                  // ext_flash_uas_burst_adapter:source0_channel -> ext_flash_uas_agent:cp_channel
	wire          ext_flash_uas_burst_adapter_source0_startofpacket;                            // ext_flash_uas_burst_adapter:source0_startofpacket -> ext_flash_uas_agent:cp_startofpacket
	wire          ext_flash_uas_burst_adapter_source0_endofpacket;                              // ext_flash_uas_burst_adapter:source0_endofpacket -> ext_flash_uas_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                         // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [109:0] cmd_demux_src0_data;                                                          // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                         // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [8:0] cmd_demux_src0_channel;                                                       // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                 // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                   // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                         // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [109:0] cmd_demux_src1_data;                                                          // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                         // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [8:0] cmd_demux_src1_channel;                                                       // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                 // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                   // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                         // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [109:0] cmd_demux_src2_data;                                                          // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                         // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [8:0] cmd_demux_src2_channel;                                                       // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                 // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                   // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                         // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [109:0] cmd_demux_src3_data;                                                          // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                         // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [8:0] cmd_demux_src3_channel;                                                       // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                 // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                   // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                         // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [109:0] cmd_demux_src4_data;                                                          // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                         // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [8:0] cmd_demux_src4_channel;                                                       // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                 // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                   // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                         // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [109:0] cmd_demux_src5_data;                                                          // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                         // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [8:0] cmd_demux_src5_channel;                                                       // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                 // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                   // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                         // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [109:0] cmd_demux_src6_data;                                                          // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                         // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire    [8:0] cmd_demux_src6_channel;                                                       // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                 // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                   // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                         // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [109:0] cmd_demux_src7_data;                                                          // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                         // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire    [8:0] cmd_demux_src7_channel;                                                       // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                 // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                   // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                         // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [109:0] cmd_demux_src8_data;                                                          // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                         // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire    [8:0] cmd_demux_src8_channel;                                                       // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                 // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                   // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                     // cmd_demux_001:src0_valid -> cmd_mux_003:sink1_valid
	wire  [109:0] cmd_demux_001_src0_data;                                                      // cmd_demux_001:src0_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src0_ready;                                                     // cmd_mux_003:sink1_ready -> cmd_demux_001:src0_ready
	wire    [8:0] cmd_demux_001_src0_channel;                                                   // cmd_demux_001:src0_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                             // cmd_demux_001:src0_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                               // cmd_demux_001:src0_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                     // cmd_demux_001:src1_valid -> cmd_mux_005:sink1_valid
	wire  [109:0] cmd_demux_001_src1_data;                                                      // cmd_demux_001:src1_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src1_ready;                                                     // cmd_mux_005:sink1_ready -> cmd_demux_001:src1_ready
	wire    [8:0] cmd_demux_001_src1_channel;                                                   // cmd_demux_001:src1_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                             // cmd_demux_001:src1_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                               // cmd_demux_001:src1_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                     // cmd_demux_001:src2_valid -> cmd_mux_007:sink1_valid
	wire  [109:0] cmd_demux_001_src2_data;                                                      // cmd_demux_001:src2_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src2_ready;                                                     // cmd_mux_007:sink1_ready -> cmd_demux_001:src2_ready
	wire    [8:0] cmd_demux_001_src2_channel;                                                   // cmd_demux_001:src2_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                             // cmd_demux_001:src2_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                               // cmd_demux_001:src2_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                     // cmd_demux_001:src3_valid -> cmd_mux_008:sink1_valid
	wire  [109:0] cmd_demux_001_src3_data;                                                      // cmd_demux_001:src3_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src3_ready;                                                     // cmd_mux_008:sink1_ready -> cmd_demux_001:src3_ready
	wire    [8:0] cmd_demux_001_src3_channel;                                                   // cmd_demux_001:src3_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                             // cmd_demux_001:src3_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                               // cmd_demux_001:src3_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                     // cmd_demux_002:src0_valid -> cmd_mux_005:sink2_valid
	wire  [109:0] cmd_demux_002_src0_data;                                                      // cmd_demux_002:src0_data -> cmd_mux_005:sink2_data
	wire          cmd_demux_002_src0_ready;                                                     // cmd_mux_005:sink2_ready -> cmd_demux_002:src0_ready
	wire    [8:0] cmd_demux_002_src0_channel;                                                   // cmd_demux_002:src0_channel -> cmd_mux_005:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                             // cmd_demux_002:src0_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                               // cmd_demux_002:src0_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                     // cmd_demux_002:src1_valid -> cmd_mux_007:sink2_valid
	wire  [109:0] cmd_demux_002_src1_data;                                                      // cmd_demux_002:src1_data -> cmd_mux_007:sink2_data
	wire          cmd_demux_002_src1_ready;                                                     // cmd_mux_007:sink2_ready -> cmd_demux_002:src1_ready
	wire    [8:0] cmd_demux_002_src1_channel;                                                   // cmd_demux_002:src1_channel -> cmd_mux_007:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                             // cmd_demux_002:src1_startofpacket -> cmd_mux_007:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                               // cmd_demux_002:src1_endofpacket -> cmd_mux_007:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                     // cmd_demux_003:src0_valid -> cmd_mux_005:sink3_valid
	wire  [109:0] cmd_demux_003_src0_data;                                                      // cmd_demux_003:src0_data -> cmd_mux_005:sink3_data
	wire          cmd_demux_003_src0_ready;                                                     // cmd_mux_005:sink3_ready -> cmd_demux_003:src0_ready
	wire    [8:0] cmd_demux_003_src0_channel;                                                   // cmd_demux_003:src0_channel -> cmd_mux_005:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                             // cmd_demux_003:src0_startofpacket -> cmd_mux_005:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                               // cmd_demux_003:src0_endofpacket -> cmd_mux_005:sink3_endofpacket
	wire          cmd_demux_003_src1_valid;                                                     // cmd_demux_003:src1_valid -> cmd_mux_007:sink3_valid
	wire  [109:0] cmd_demux_003_src1_data;                                                      // cmd_demux_003:src1_data -> cmd_mux_007:sink3_data
	wire          cmd_demux_003_src1_ready;                                                     // cmd_mux_007:sink3_ready -> cmd_demux_003:src1_ready
	wire    [8:0] cmd_demux_003_src1_channel;                                                   // cmd_demux_003:src1_channel -> cmd_mux_007:sink3_channel
	wire          cmd_demux_003_src1_startofpacket;                                             // cmd_demux_003:src1_startofpacket -> cmd_mux_007:sink3_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                               // cmd_demux_003:src1_endofpacket -> cmd_mux_007:sink3_endofpacket
	wire          cmd_demux_004_src0_valid;                                                     // cmd_demux_004:src0_valid -> cmd_mux_006:sink1_valid
	wire  [109:0] cmd_demux_004_src0_data;                                                      // cmd_demux_004:src0_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_004_src0_ready;                                                     // cmd_mux_006:sink1_ready -> cmd_demux_004:src0_ready
	wire    [8:0] cmd_demux_004_src0_channel;                                                   // cmd_demux_004:src0_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_004_src0_startofpacket;                                             // cmd_demux_004:src0_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                               // cmd_demux_004:src0_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_005_src0_valid;                                                     // cmd_demux_005:src0_valid -> cmd_mux_006:sink2_valid
	wire  [109:0] cmd_demux_005_src0_data;                                                      // cmd_demux_005:src0_data -> cmd_mux_006:sink2_data
	wire          cmd_demux_005_src0_ready;                                                     // cmd_mux_006:sink2_ready -> cmd_demux_005:src0_ready
	wire    [8:0] cmd_demux_005_src0_channel;                                                   // cmd_demux_005:src0_channel -> cmd_mux_006:sink2_channel
	wire          cmd_demux_005_src0_startofpacket;                                             // cmd_demux_005:src0_startofpacket -> cmd_mux_006:sink2_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                               // cmd_demux_005:src0_endofpacket -> cmd_mux_006:sink2_endofpacket
	wire          cmd_demux_006_src0_valid;                                                     // cmd_demux_006:src0_valid -> cmd_mux_006:sink3_valid
	wire  [109:0] cmd_demux_006_src0_data;                                                      // cmd_demux_006:src0_data -> cmd_mux_006:sink3_data
	wire          cmd_demux_006_src0_ready;                                                     // cmd_mux_006:sink3_ready -> cmd_demux_006:src0_ready
	wire    [8:0] cmd_demux_006_src0_channel;                                                   // cmd_demux_006:src0_channel -> cmd_mux_006:sink3_channel
	wire          cmd_demux_006_src0_startofpacket;                                             // cmd_demux_006:src0_startofpacket -> cmd_mux_006:sink3_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                               // cmd_demux_006:src0_endofpacket -> cmd_mux_006:sink3_endofpacket
	wire          cmd_demux_007_src0_valid;                                                     // cmd_demux_007:src0_valid -> cmd_mux_006:sink4_valid
	wire  [109:0] cmd_demux_007_src0_data;                                                      // cmd_demux_007:src0_data -> cmd_mux_006:sink4_data
	wire          cmd_demux_007_src0_ready;                                                     // cmd_mux_006:sink4_ready -> cmd_demux_007:src0_ready
	wire    [8:0] cmd_demux_007_src0_channel;                                                   // cmd_demux_007:src0_channel -> cmd_mux_006:sink4_channel
	wire          cmd_demux_007_src0_startofpacket;                                             // cmd_demux_007:src0_startofpacket -> cmd_mux_006:sink4_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                               // cmd_demux_007:src0_endofpacket -> cmd_mux_006:sink4_endofpacket
	wire          rsp_demux_src0_valid;                                                         // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [109:0] rsp_demux_src0_data;                                                          // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                         // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [8:0] rsp_demux_src0_channel;                                                       // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                 // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                   // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                     // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [109:0] rsp_demux_001_src0_data;                                                      // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                     // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [8:0] rsp_demux_001_src0_channel;                                                   // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                             // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                               // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                     // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [109:0] rsp_demux_002_src0_data;                                                      // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                     // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [8:0] rsp_demux_002_src0_channel;                                                   // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                             // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                               // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                     // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [109:0] rsp_demux_003_src0_data;                                                      // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                     // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [8:0] rsp_demux_003_src0_channel;                                                   // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                             // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                               // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                     // rsp_demux_003:src1_valid -> rsp_mux_001:sink0_valid
	wire  [109:0] rsp_demux_003_src1_data;                                                      // rsp_demux_003:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_003_src1_ready;                                                     // rsp_mux_001:sink0_ready -> rsp_demux_003:src1_ready
	wire    [8:0] rsp_demux_003_src1_channel;                                                   // rsp_demux_003:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_003_src1_startofpacket;                                             // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                               // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_004_src0_valid;                                                     // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [109:0] rsp_demux_004_src0_data;                                                      // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                     // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [8:0] rsp_demux_004_src0_channel;                                                   // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                             // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                               // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                     // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [109:0] rsp_demux_005_src0_data;                                                      // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                     // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [8:0] rsp_demux_005_src0_channel;                                                   // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                             // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                               // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                     // rsp_demux_005:src1_valid -> rsp_mux_001:sink1_valid
	wire  [109:0] rsp_demux_005_src1_data;                                                      // rsp_demux_005:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_005_src1_ready;                                                     // rsp_mux_001:sink1_ready -> rsp_demux_005:src1_ready
	wire    [8:0] rsp_demux_005_src1_channel;                                                   // rsp_demux_005:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_005_src1_startofpacket;                                             // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                               // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_005_src2_valid;                                                     // rsp_demux_005:src2_valid -> rsp_mux_002:sink0_valid
	wire  [109:0] rsp_demux_005_src2_data;                                                      // rsp_demux_005:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_005_src2_ready;                                                     // rsp_mux_002:sink0_ready -> rsp_demux_005:src2_ready
	wire    [8:0] rsp_demux_005_src2_channel;                                                   // rsp_demux_005:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_005_src2_startofpacket;                                             // rsp_demux_005:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                               // rsp_demux_005:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_005_src3_valid;                                                     // rsp_demux_005:src3_valid -> rsp_mux_003:sink0_valid
	wire  [109:0] rsp_demux_005_src3_data;                                                      // rsp_demux_005:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_005_src3_ready;                                                     // rsp_mux_003:sink0_ready -> rsp_demux_005:src3_ready
	wire    [8:0] rsp_demux_005_src3_channel;                                                   // rsp_demux_005:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_005_src3_startofpacket;                                             // rsp_demux_005:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_005_src3_endofpacket;                                               // rsp_demux_005:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_006_src0_valid;                                                     // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [109:0] rsp_demux_006_src0_data;                                                      // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                     // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire    [8:0] rsp_demux_006_src0_channel;                                                   // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                             // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                               // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                     // rsp_demux_006:src1_valid -> rsp_mux_004:sink0_valid
	wire  [109:0] rsp_demux_006_src1_data;                                                      // rsp_demux_006:src1_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_006_src1_ready;                                                     // rsp_mux_004:sink0_ready -> rsp_demux_006:src1_ready
	wire    [8:0] rsp_demux_006_src1_channel;                                                   // rsp_demux_006:src1_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_006_src1_startofpacket;                                             // rsp_demux_006:src1_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                               // rsp_demux_006:src1_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_006_src2_valid;                                                     // rsp_demux_006:src2_valid -> rsp_mux_005:sink0_valid
	wire  [109:0] rsp_demux_006_src2_data;                                                      // rsp_demux_006:src2_data -> rsp_mux_005:sink0_data
	wire          rsp_demux_006_src2_ready;                                                     // rsp_mux_005:sink0_ready -> rsp_demux_006:src2_ready
	wire    [8:0] rsp_demux_006_src2_channel;                                                   // rsp_demux_006:src2_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_006_src2_startofpacket;                                             // rsp_demux_006:src2_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          rsp_demux_006_src2_endofpacket;                                               // rsp_demux_006:src2_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_006_src3_valid;                                                     // rsp_demux_006:src3_valid -> rsp_mux_006:sink0_valid
	wire  [109:0] rsp_demux_006_src3_data;                                                      // rsp_demux_006:src3_data -> rsp_mux_006:sink0_data
	wire          rsp_demux_006_src3_ready;                                                     // rsp_mux_006:sink0_ready -> rsp_demux_006:src3_ready
	wire    [8:0] rsp_demux_006_src3_channel;                                                   // rsp_demux_006:src3_channel -> rsp_mux_006:sink0_channel
	wire          rsp_demux_006_src3_startofpacket;                                             // rsp_demux_006:src3_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          rsp_demux_006_src3_endofpacket;                                               // rsp_demux_006:src3_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_006_src4_valid;                                                     // rsp_demux_006:src4_valid -> rsp_mux_007:sink0_valid
	wire  [109:0] rsp_demux_006_src4_data;                                                      // rsp_demux_006:src4_data -> rsp_mux_007:sink0_data
	wire          rsp_demux_006_src4_ready;                                                     // rsp_mux_007:sink0_ready -> rsp_demux_006:src4_ready
	wire    [8:0] rsp_demux_006_src4_channel;                                                   // rsp_demux_006:src4_channel -> rsp_mux_007:sink0_channel
	wire          rsp_demux_006_src4_startofpacket;                                             // rsp_demux_006:src4_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          rsp_demux_006_src4_endofpacket;                                               // rsp_demux_006:src4_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_demux_007_src0_valid;                                                     // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [109:0] rsp_demux_007_src0_data;                                                      // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                     // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire    [8:0] rsp_demux_007_src0_channel;                                                   // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                             // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                               // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                     // rsp_demux_007:src1_valid -> rsp_mux_001:sink2_valid
	wire  [109:0] rsp_demux_007_src1_data;                                                      // rsp_demux_007:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_007_src1_ready;                                                     // rsp_mux_001:sink2_ready -> rsp_demux_007:src1_ready
	wire    [8:0] rsp_demux_007_src1_channel;                                                   // rsp_demux_007:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_007_src1_startofpacket;                                             // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                               // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_007_src2_valid;                                                     // rsp_demux_007:src2_valid -> rsp_mux_002:sink1_valid
	wire  [109:0] rsp_demux_007_src2_data;                                                      // rsp_demux_007:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_007_src2_ready;                                                     // rsp_mux_002:sink1_ready -> rsp_demux_007:src2_ready
	wire    [8:0] rsp_demux_007_src2_channel;                                                   // rsp_demux_007:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_007_src2_startofpacket;                                             // rsp_demux_007:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_007_src2_endofpacket;                                               // rsp_demux_007:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_007_src3_valid;                                                     // rsp_demux_007:src3_valid -> rsp_mux_003:sink1_valid
	wire  [109:0] rsp_demux_007_src3_data;                                                      // rsp_demux_007:src3_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_007_src3_ready;                                                     // rsp_mux_003:sink1_ready -> rsp_demux_007:src3_ready
	wire    [8:0] rsp_demux_007_src3_channel;                                                   // rsp_demux_007:src3_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_007_src3_startofpacket;                                             // rsp_demux_007:src3_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_007_src3_endofpacket;                                               // rsp_demux_007:src3_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_008_src0_valid;                                                     // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [109:0] rsp_demux_008_src0_data;                                                      // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                     // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire    [8:0] rsp_demux_008_src0_channel;                                                   // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                             // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                               // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                     // rsp_demux_008:src1_valid -> rsp_mux_001:sink3_valid
	wire  [109:0] rsp_demux_008_src1_data;                                                      // rsp_demux_008:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_008_src1_ready;                                                     // rsp_mux_001:sink3_ready -> rsp_demux_008:src1_ready
	wire    [8:0] rsp_demux_008_src1_channel;                                                   // rsp_demux_008:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_008_src1_startofpacket;                                             // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                               // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          router_016_src_valid;                                                         // router_016:src_valid -> ext_flash_uas_rsp_width_adapter:in_valid
	wire   [91:0] router_016_src_data;                                                          // router_016:src_data -> ext_flash_uas_rsp_width_adapter:in_data
	wire          router_016_src_ready;                                                         // ext_flash_uas_rsp_width_adapter:in_ready -> router_016:src_ready
	wire    [8:0] router_016_src_channel;                                                       // router_016:src_channel -> ext_flash_uas_rsp_width_adapter:in_channel
	wire          router_016_src_startofpacket;                                                 // router_016:src_startofpacket -> ext_flash_uas_rsp_width_adapter:in_startofpacket
	wire          router_016_src_endofpacket;                                                   // router_016:src_endofpacket -> ext_flash_uas_rsp_width_adapter:in_endofpacket
	wire          ext_flash_uas_rsp_width_adapter_src_valid;                                    // ext_flash_uas_rsp_width_adapter:out_valid -> rsp_demux_008:sink_valid
	wire  [109:0] ext_flash_uas_rsp_width_adapter_src_data;                                     // ext_flash_uas_rsp_width_adapter:out_data -> rsp_demux_008:sink_data
	wire          ext_flash_uas_rsp_width_adapter_src_ready;                                    // rsp_demux_008:sink_ready -> ext_flash_uas_rsp_width_adapter:out_ready
	wire    [8:0] ext_flash_uas_rsp_width_adapter_src_channel;                                  // ext_flash_uas_rsp_width_adapter:out_channel -> rsp_demux_008:sink_channel
	wire          ext_flash_uas_rsp_width_adapter_src_startofpacket;                            // ext_flash_uas_rsp_width_adapter:out_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          ext_flash_uas_rsp_width_adapter_src_endofpacket;                              // ext_flash_uas_rsp_width_adapter:out_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                        // cmd_mux_008:src_valid -> ext_flash_uas_cmd_width_adapter:in_valid
	wire  [109:0] cmd_mux_008_src_data;                                                         // cmd_mux_008:src_data -> ext_flash_uas_cmd_width_adapter:in_data
	wire          cmd_mux_008_src_ready;                                                        // ext_flash_uas_cmd_width_adapter:in_ready -> cmd_mux_008:src_ready
	wire    [8:0] cmd_mux_008_src_channel;                                                      // cmd_mux_008:src_channel -> ext_flash_uas_cmd_width_adapter:in_channel
	wire          cmd_mux_008_src_startofpacket;                                                // cmd_mux_008:src_startofpacket -> ext_flash_uas_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                  // cmd_mux_008:src_endofpacket -> ext_flash_uas_cmd_width_adapter:in_endofpacket
	wire          ext_flash_uas_cmd_width_adapter_src_valid;                                    // ext_flash_uas_cmd_width_adapter:out_valid -> ext_flash_uas_burst_adapter:sink0_valid
	wire   [91:0] ext_flash_uas_cmd_width_adapter_src_data;                                     // ext_flash_uas_cmd_width_adapter:out_data -> ext_flash_uas_burst_adapter:sink0_data
	wire          ext_flash_uas_cmd_width_adapter_src_ready;                                    // ext_flash_uas_burst_adapter:sink0_ready -> ext_flash_uas_cmd_width_adapter:out_ready
	wire    [8:0] ext_flash_uas_cmd_width_adapter_src_channel;                                  // ext_flash_uas_cmd_width_adapter:out_channel -> ext_flash_uas_burst_adapter:sink0_channel
	wire          ext_flash_uas_cmd_width_adapter_src_startofpacket;                            // ext_flash_uas_cmd_width_adapter:out_startofpacket -> ext_flash_uas_burst_adapter:sink0_startofpacket
	wire          ext_flash_uas_cmd_width_adapter_src_endofpacket;                              // ext_flash_uas_cmd_width_adapter:out_endofpacket -> ext_flash_uas_burst_adapter:sink0_endofpacket
	wire    [8:0] cpu_data_master_limiter_cmd_valid_data;                                       // cpu_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [8:0] cpu_instruction_master_limiter_cmd_valid_data;                                // cpu_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire    [8:0] sgdma_tx_m_read_limiter_cmd_valid_data;                                       // sgdma_tx_m_read_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire          tse_mac_control_port_agent_rdata_fifo_src_valid;                              // tse_mac_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] tse_mac_control_port_agent_rdata_fifo_src_data;                               // tse_mac_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          tse_mac_control_port_agent_rdata_fifo_src_ready;                              // avalon_st_adapter:in_0_ready -> tse_mac_control_port_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                // avalon_st_adapter:out_0_valid -> tse_mac_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                 // avalon_st_adapter:out_0_data -> tse_mac_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                // tse_mac_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                // avalon_st_adapter:out_0_error -> tse_mac_control_port_agent:rdata_fifo_sink_error
	wire          sgdma_tx_csr_agent_rdata_fifo_src_valid;                                      // sgdma_tx_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] sgdma_tx_csr_agent_rdata_fifo_src_data;                                       // sgdma_tx_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          sgdma_tx_csr_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_001:in_0_ready -> sgdma_tx_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                            // avalon_st_adapter_001:out_0_valid -> sgdma_tx_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                             // avalon_st_adapter_001:out_0_data -> sgdma_tx_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                            // sgdma_tx_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                            // avalon_st_adapter_001:out_0_error -> sgdma_tx_csr_agent:rdata_fifo_sink_error
	wire          sgdma_rx_csr_agent_rdata_fifo_src_valid;                                      // sgdma_rx_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] sgdma_rx_csr_agent_rdata_fifo_src_data;                                       // sgdma_rx_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          sgdma_rx_csr_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_002:in_0_ready -> sgdma_rx_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                            // avalon_st_adapter_002:out_0_valid -> sgdma_rx_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                             // avalon_st_adapter_002:out_0_data -> sgdma_rx_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                            // sgdma_rx_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                            // avalon_st_adapter_002:out_0_error -> sgdma_rx_csr_agent:rdata_fifo_sink_error
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_valid;                               // cpu_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] cpu_debug_mem_slave_agent_rdata_fifo_src_data;                                // cpu_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_ready;                               // avalon_st_adapter_003:in_0_ready -> cpu_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                            // avalon_st_adapter_003:out_0_valid -> cpu_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                             // avalon_st_adapter_003:out_0_data -> cpu_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                            // cpu_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                            // avalon_st_adapter_003:out_0_error -> cpu_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          pb_cpu_to_io_s0_agent_rdata_fifo_src_valid;                                   // pb_cpu_to_io_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] pb_cpu_to_io_s0_agent_rdata_fifo_src_data;                                    // pb_cpu_to_io_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          pb_cpu_to_io_s0_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_004:in_0_ready -> pb_cpu_to_io_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                            // avalon_st_adapter_004:out_0_valid -> pb_cpu_to_io_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                             // avalon_st_adapter_004:out_0_data -> pb_cpu_to_io_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                            // pb_cpu_to_io_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                            // avalon_st_adapter_004:out_0_error -> pb_cpu_to_io_s0_agent:rdata_fifo_sink_error
	wire          onchip_ram_s1_agent_rdata_fifo_src_valid;                                     // onchip_ram_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] onchip_ram_s1_agent_rdata_fifo_src_data;                                      // onchip_ram_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          onchip_ram_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_005:in_0_ready -> onchip_ram_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                            // avalon_st_adapter_005:out_0_valid -> onchip_ram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                             // avalon_st_adapter_005:out_0_data -> onchip_ram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                            // onchip_ram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                            // avalon_st_adapter_005:out_0_error -> onchip_ram_s1_agent:rdata_fifo_sink_error
	wire          descriptor_memory_s1_agent_rdata_fifo_src_valid;                              // descriptor_memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] descriptor_memory_s1_agent_rdata_fifo_src_data;                               // descriptor_memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          descriptor_memory_s1_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_006:in_0_ready -> descriptor_memory_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                            // avalon_st_adapter_006:out_0_valid -> descriptor_memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                             // avalon_st_adapter_006:out_0_data -> descriptor_memory_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                            // descriptor_memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                            // avalon_st_adapter_006:out_0_error -> descriptor_memory_s1_agent:rdata_fifo_sink_error
	wire          onchip_ram_s2_agent_rdata_fifo_src_valid;                                     // onchip_ram_s2_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] onchip_ram_s2_agent_rdata_fifo_src_data;                                      // onchip_ram_s2_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          onchip_ram_s2_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_007:in_0_ready -> onchip_ram_s2_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                            // avalon_st_adapter_007:out_0_valid -> onchip_ram_s2_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                             // avalon_st_adapter_007:out_0_data -> onchip_ram_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                            // onchip_ram_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                            // avalon_st_adapter_007:out_0_error -> onchip_ram_s2_agent:rdata_fifo_sink_error
	wire          ext_flash_uas_agent_rdata_fifo_out_valid;                                     // ext_flash_uas_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [17:0] ext_flash_uas_agent_rdata_fifo_out_data;                                      // ext_flash_uas_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          ext_flash_uas_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_008:in_0_ready -> ext_flash_uas_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                            // avalon_st_adapter_008:out_0_valid -> ext_flash_uas_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_008_out_0_data;                                             // avalon_st_adapter_008:out_0_data -> ext_flash_uas_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                            // ext_flash_uas_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                            // avalon_st_adapter_008:out_0_error -> ext_flash_uas_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_data_master_translator (
		.clk                    (clkin_50_clk_clk),                                                   //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_data_master_read),                                               //                          .read
		.av_readdata            (cpu_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (cpu_data_master_write),                                              //                          .write
		.av_writedata           (cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                    (clkin_50_clk_clk),                                                          //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (cpu_instruction_master_read),                                               //                          .read
		.av_readdata            (cpu_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_tx_m_read_translator (
		.clk                    (clkin_50_clk_clk),                                                   //                       clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (sgdma_tx_m_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_tx_m_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_tx_m_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_tx_m_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_tx_m_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_tx_m_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_tx_m_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_tx_m_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_tx_m_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_tx_m_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_tx_m_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_tx_m_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_tx_m_read_waitrequest),                                        //                          .waitrequest
		.av_read                (sgdma_tx_m_read_read),                                               //                          .read
		.av_readdata            (sgdma_tx_m_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (sgdma_tx_m_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_write               (1'b0),                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_rx_m_write_translator (
		.clk                    (clkin_50_clk_clk),                                                    //                       clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),                          //                     reset.reset
		.uav_address            (sgdma_rx_m_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_rx_m_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_rx_m_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_rx_m_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_rx_m_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_rx_m_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_rx_m_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_rx_m_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_rx_m_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_rx_m_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_rx_m_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_rx_m_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_rx_m_write_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (sgdma_rx_m_write_byteenable),                                         //                          .byteenable
		.av_write               (sgdma_rx_m_write_write),                                              //                          .write
		.av_writedata           (sgdma_rx_m_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                //               (terminated)
		.av_read                (1'b0),                                                                //               (terminated)
		.av_readdata            (),                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                //               (terminated)
		.uav_clken              (),                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                //               (terminated)
		.uav_response           (2'b00),                                                               //               (terminated)
		.av_response            (),                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_rx_descriptor_read_translator (
		.clk                    (clkin_50_clk_clk),                                                            //                       clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),                                  //                     reset.reset
		.uav_address            (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_rx_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_rx_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                (sgdma_rx_descriptor_read_read),                                               //                          .read
		.av_readdata            (sgdma_rx_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (sgdma_rx_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_write               (1'b0),                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_tx_descriptor_read_translator (
		.clk                    (clkin_50_clk_clk),                                                            //                       clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),                                  //                     reset.reset
		.uav_address            (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_tx_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_tx_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                (sgdma_tx_descriptor_read_read),                                               //                          .read
		.av_readdata            (sgdma_tx_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (sgdma_tx_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_write               (1'b0),                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_rx_descriptor_write_translator (
		.clk                    (clkin_50_clk_clk),                                                             //                       clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_rx_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_rx_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write               (sgdma_rx_descriptor_write_write),                                              //                          .write
		.av_writedata           (sgdma_rx_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                         //               (terminated)
		.av_byteenable          (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_read                (1'b0),                                                                         //               (terminated)
		.av_readdata            (),                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                             //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_tx_descriptor_write_translator (
		.clk                    (clkin_50_clk_clk),                                                             //                       clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_tx_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_tx_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write               (sgdma_tx_descriptor_write_write),                                              //                          .write
		.av_writedata           (sgdma_tx_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                         //               (terminated)
		.av_byteenable          (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_read                (1'b0),                                                                         //               (terminated)
		.av_readdata            (),                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                             //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tse_mac_control_port_translator (
		.clk                    (clkin_50_clk_clk),                            //                      clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (tse_mac_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (tse_mac_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (tse_mac_control_port_agent_m0_read),          //                         .read
		.uav_write              (tse_mac_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (tse_mac_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (tse_mac_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (tse_mac_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (tse_mac_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (tse_mac_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (tse_mac_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (tse_mac_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (tse_mac_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (tse_mac_control_port_write),                  //                         .write
		.av_read                (tse_mac_control_port_read),                   //                         .read
		.av_readdata            (tse_mac_control_port_readdata),               //                         .readdata
		.av_writedata           (tse_mac_control_port_writedata),              //                         .writedata
		.av_waitrequest         (tse_mac_control_port_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sgdma_tx_csr_translator (
		.clk                    (clkin_50_clk_clk),                           //                      clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sgdma_tx_csr_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (sgdma_tx_csr_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (sgdma_tx_csr_agent_m0_read),                 //                         .read
		.uav_write              (sgdma_tx_csr_agent_m0_write),                //                         .write
		.uav_waitrequest        (sgdma_tx_csr_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (sgdma_tx_csr_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (sgdma_tx_csr_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (sgdma_tx_csr_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (sgdma_tx_csr_agent_m0_writedata),            //                         .writedata
		.uav_lock               (sgdma_tx_csr_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (sgdma_tx_csr_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (sgdma_tx_csr_address),                       //      avalon_anti_slave_0.address
		.av_write               (sgdma_tx_csr_write),                         //                         .write
		.av_read                (sgdma_tx_csr_read),                          //                         .read
		.av_readdata            (sgdma_tx_csr_readdata),                      //                         .readdata
		.av_writedata           (sgdma_tx_csr_writedata),                     //                         .writedata
		.av_chipselect          (sgdma_tx_csr_chipselect),                    //                         .chipselect
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sgdma_rx_csr_translator (
		.clk                    (clkin_50_clk_clk),                           //                      clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sgdma_rx_csr_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (sgdma_rx_csr_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (sgdma_rx_csr_agent_m0_read),                 //                         .read
		.uav_write              (sgdma_rx_csr_agent_m0_write),                //                         .write
		.uav_waitrequest        (sgdma_rx_csr_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (sgdma_rx_csr_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (sgdma_rx_csr_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (sgdma_rx_csr_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (sgdma_rx_csr_agent_m0_writedata),            //                         .writedata
		.uav_lock               (sgdma_rx_csr_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (sgdma_rx_csr_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (sgdma_rx_csr_address),                       //      avalon_anti_slave_0.address
		.av_write               (sgdma_rx_csr_write),                         //                         .write
		.av_read                (sgdma_rx_csr_read),                          //                         .read
		.av_readdata            (sgdma_rx_csr_readdata),                      //                         .readdata
		.av_writedata           (sgdma_rx_csr_writedata),                     //                         .writedata
		.av_chipselect          (sgdma_rx_csr_chipselect),                    //                         .chipselect
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_debug_mem_slave_translator (
		.clk                    (clkin_50_clk_clk),                           //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cpu_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_debug_mem_slave_write),                  //                         .write
		.av_read                (cpu_debug_mem_slave_read),                   //                         .read
		.av_readdata            (cpu_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (cpu_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (cpu_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (cpu_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pb_cpu_to_io_s0_translator (
		.clk                    (clkin_50_clk_clk),                       //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (pb_cpu_to_io_s0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pb_cpu_to_io_s0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pb_cpu_to_io_s0_agent_m0_read),          //                         .read
		.uav_write              (pb_cpu_to_io_s0_agent_m0_write),         //                         .write
		.uav_waitrequest        (pb_cpu_to_io_s0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pb_cpu_to_io_s0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pb_cpu_to_io_s0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pb_cpu_to_io_s0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pb_cpu_to_io_s0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pb_cpu_to_io_s0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pb_cpu_to_io_s0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (pb_cpu_to_io_s0_address),                //      avalon_anti_slave_0.address
		.av_write               (pb_cpu_to_io_s0_write),                  //                         .write
		.av_read                (pb_cpu_to_io_s0_read),                   //                         .read
		.av_readdata            (pb_cpu_to_io_s0_readdata),               //                         .readdata
		.av_writedata           (pb_cpu_to_io_s0_writedata),              //                         .writedata
		.av_burstcount          (pb_cpu_to_io_s0_burstcount),             //                         .burstcount
		.av_byteenable          (pb_cpu_to_io_s0_byteenable),             //                         .byteenable
		.av_readdatavalid       (pb_cpu_to_io_s0_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (pb_cpu_to_io_s0_waitrequest),            //                         .waitrequest
		.av_debugaccess         (pb_cpu_to_io_s0_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                       //              (terminated)
		.av_beginbursttransfer  (),                                       //              (terminated)
		.av_writebyteenable     (),                                       //              (terminated)
		.av_lock                (),                                       //              (terminated)
		.av_chipselect          (),                                       //              (terminated)
		.av_clken               (),                                       //              (terminated)
		.uav_clken              (1'b0),                                   //              (terminated)
		.av_outputenable        (),                                       //              (terminated)
		.uav_response           (),                                       //              (terminated)
		.av_response            (2'b00),                                  //              (terminated)
		.uav_writeresponsevalid (),                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (19),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_ram_s1_translator (
		.clk                    (clkin_50_clk_clk),                           //                      clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_ram_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_ram_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (onchip_ram_s1_agent_m0_read),                //                         .read
		.uav_write              (onchip_ram_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (onchip_ram_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (onchip_ram_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (onchip_ram_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (onchip_ram_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (onchip_ram_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (onchip_ram_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (onchip_ram_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (onchip_ram_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (onchip_ram_s1_write),                        //                         .write
		.av_readdata            (onchip_ram_s1_readdata),                     //                         .readdata
		.av_writedata           (onchip_ram_s1_writedata),                    //                         .writedata
		.av_byteenable          (onchip_ram_s1_byteenable),                   //                         .byteenable
		.av_chipselect          (onchip_ram_s1_chipselect),                   //                         .chipselect
		.av_clken               (onchip_ram_s1_clken),                        //                         .clken
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) descriptor_memory_s1_translator (
		.clk                    (clkin_50_clk_clk),                            //                      clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (descriptor_memory_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (descriptor_memory_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (descriptor_memory_s1_agent_m0_read),          //                         .read
		.uav_write              (descriptor_memory_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (descriptor_memory_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (descriptor_memory_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (descriptor_memory_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (descriptor_memory_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (descriptor_memory_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (descriptor_memory_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (descriptor_memory_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (descriptor_memory_s1_address),                //      avalon_anti_slave_0.address
		.av_write               (descriptor_memory_s1_write),                  //                         .write
		.av_readdata            (descriptor_memory_s1_readdata),               //                         .readdata
		.av_writedata           (descriptor_memory_s1_writedata),              //                         .writedata
		.av_byteenable          (descriptor_memory_s1_byteenable),             //                         .byteenable
		.av_chipselect          (descriptor_memory_s1_chipselect),             //                         .chipselect
		.av_clken               (descriptor_memory_s1_clken),                  //                         .clken
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (19),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_ram_s2_translator (
		.clk                    (clkin_50_clk_clk),                           //                      clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_ram_s2_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_ram_s2_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (onchip_ram_s2_agent_m0_read),                //                         .read
		.uav_write              (onchip_ram_s2_agent_m0_write),               //                         .write
		.uav_waitrequest        (onchip_ram_s2_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (onchip_ram_s2_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (onchip_ram_s2_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (onchip_ram_s2_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (onchip_ram_s2_agent_m0_writedata),           //                         .writedata
		.uav_lock               (onchip_ram_s2_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (onchip_ram_s2_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (onchip_ram_s2_address),                      //      avalon_anti_slave_0.address
		.av_write               (onchip_ram_s2_write),                        //                         .write
		.av_readdata            (onchip_ram_s2_readdata),                     //                         .readdata
		.av_writedata           (onchip_ram_s2_writedata),                    //                         .writedata
		.av_byteenable          (onchip_ram_s2_byteenable),                   //                         .byteenable
		.av_chipselect          (onchip_ram_s2_chipselect),                   //                         .chipselect
		.av_clken               (onchip_ram_s2_clken),                        //                         .clken
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (27),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (2),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ext_flash_uas_translator (
		.clk                    (clkin_50_clk_clk),                           //                      clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ext_flash_uas_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (ext_flash_uas_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (ext_flash_uas_agent_m0_read),                //                         .read
		.uav_write              (ext_flash_uas_agent_m0_write),               //                         .write
		.uav_waitrequest        (ext_flash_uas_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (ext_flash_uas_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (ext_flash_uas_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (ext_flash_uas_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (ext_flash_uas_agent_m0_writedata),           //                         .writedata
		.uav_lock               (ext_flash_uas_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (ext_flash_uas_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (ext_flash_uas_address),                      //      avalon_anti_slave_0.address
		.av_write               (ext_flash_uas_write),                        //                         .write
		.av_read                (ext_flash_uas_read),                         //                         .read
		.av_readdata            (ext_flash_uas_readdata),                     //                         .readdata
		.av_writedata           (ext_flash_uas_writedata),                    //                         .writedata
		.av_burstcount          (ext_flash_uas_burstcount),                   //                         .burstcount
		.av_byteenable          (ext_flash_uas_byteenable),                   //                         .byteenable
		.av_readdatavalid       (ext_flash_uas_readdatavalid),                //                         .readdatavalid
		.av_waitrequest         (ext_flash_uas_waitrequest),                  //                         .waitrequest
		.av_lock                (ext_flash_uas_lock),                         //                         .lock
		.av_debugaccess         (ext_flash_uas_debugaccess),                  //                         .debugaccess
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                   (clkin_50_clk_clk),                                                   //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                   (clkin_50_clk_clk),                                                          //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (7),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_tx_m_read_agent (
		.clk                   (clkin_50_clk_clk),                                                   //       clk.clk
		.reset                 (sgdma_tx_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (sgdma_tx_m_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_tx_m_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_tx_m_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_tx_m_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_tx_m_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_tx_m_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_tx_m_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_tx_m_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_tx_m_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_tx_m_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_tx_m_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_tx_m_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_tx_m_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_tx_m_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_tx_m_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_tx_m_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (sgdma_tx_m_read_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (sgdma_tx_m_read_limiter_rsp_src_data),                               //          .data
		.rp_channel            (sgdma_tx_m_read_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (sgdma_tx_m_read_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (sgdma_tx_m_read_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (sgdma_tx_m_read_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_rx_m_write_agent (
		.clk                   (clkin_50_clk_clk),                                                    //       clk.clk
		.reset                 (sgdma_tx_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.av_address            (sgdma_rx_m_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_rx_m_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_rx_m_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_rx_m_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_rx_m_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_rx_m_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_rx_m_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_rx_m_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_rx_m_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_rx_m_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_rx_m_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_rx_m_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_rx_m_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_rx_m_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_rx_m_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_rx_m_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                               //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                             //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                       //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                         //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                               //          .ready
		.av_response           (),                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_rx_descriptor_read_agent (
		.clk                   (clkin_50_clk_clk),                                                            //       clk.clk
		.reset                 (sgdma_tx_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.av_address            (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_rx_descriptor_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_rx_descriptor_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_rx_descriptor_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_rx_descriptor_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_rx_descriptor_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_rx_descriptor_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                       //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                        //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                     //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                                 //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                       //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_tx_descriptor_read_agent (
		.clk                   (clkin_50_clk_clk),                                                            //       clk.clk
		.reset                 (sgdma_tx_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.av_address            (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_tx_descriptor_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_tx_descriptor_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_tx_descriptor_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_tx_descriptor_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_tx_descriptor_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_tx_descriptor_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_005_src_valid),                                                       //        rp.valid
		.rp_data               (rsp_mux_005_src_data),                                                        //          .data
		.rp_channel            (rsp_mux_005_src_channel),                                                     //          .channel
		.rp_startofpacket      (rsp_mux_005_src_startofpacket),                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_005_src_endofpacket),                                                 //          .endofpacket
		.rp_ready              (rsp_mux_005_src_ready),                                                       //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_rx_descriptor_write_agent (
		.clk                   (clkin_50_clk_clk),                                                             //       clk.clk
		.reset                 (sgdma_tx_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_rx_descriptor_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_rx_descriptor_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_rx_descriptor_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_rx_descriptor_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_rx_descriptor_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_rx_descriptor_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_006_src_valid),                                                        //        rp.valid
		.rp_data               (rsp_mux_006_src_data),                                                         //          .data
		.rp_channel            (rsp_mux_006_src_channel),                                                      //          .channel
		.rp_startofpacket      (rsp_mux_006_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_006_src_endofpacket),                                                  //          .endofpacket
		.rp_ready              (rsp_mux_006_src_ready),                                                        //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (6),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_tx_descriptor_write_agent (
		.clk                   (clkin_50_clk_clk),                                                             //       clk.clk
		.reset                 (sgdma_tx_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_tx_descriptor_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_tx_descriptor_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_tx_descriptor_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_tx_descriptor_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_tx_descriptor_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_tx_descriptor_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_007_src_valid),                                                        //        rp.valid
		.rp_data               (rsp_mux_007_src_data),                                                         //          .data
		.rp_channel            (rsp_mux_007_src_channel),                                                      //          .channel
		.rp_startofpacket      (rsp_mux_007_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_007_src_endofpacket),                                                  //          .endofpacket
		.rp_ready              (rsp_mux_007_src_ready),                                                        //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tse_mac_control_port_agent (
		.clk                     (clkin_50_clk_clk),                                      //             clk.clk
		.reset                   (sgdma_tx_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (tse_mac_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (tse_mac_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (tse_mac_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (tse_mac_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (tse_mac_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (tse_mac_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (tse_mac_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (tse_mac_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (tse_mac_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (tse_mac_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (tse_mac_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (tse_mac_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (tse_mac_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (tse_mac_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (tse_mac_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (tse_mac_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                   //                .channel
		.rf_sink_ready           (tse_mac_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (tse_mac_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (tse_mac_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (tse_mac_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (tse_mac_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (tse_mac_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (tse_mac_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (tse_mac_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (tse_mac_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (tse_mac_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (tse_mac_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tse_mac_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (tse_mac_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tse_mac_control_port_agent_rsp_fifo (
		.clk               (clkin_50_clk_clk),                                      //       clk.clk
		.reset             (sgdma_tx_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (tse_mac_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (tse_mac_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (tse_mac_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (tse_mac_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (tse_mac_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (tse_mac_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (tse_mac_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (tse_mac_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (tse_mac_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (tse_mac_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sgdma_tx_csr_agent (
		.clk                     (clkin_50_clk_clk),                              //             clk.clk
		.reset                   (sgdma_tx_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (sgdma_tx_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sgdma_tx_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sgdma_tx_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sgdma_tx_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sgdma_tx_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (sgdma_tx_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sgdma_tx_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sgdma_tx_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (sgdma_tx_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sgdma_tx_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (sgdma_tx_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (sgdma_tx_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sgdma_tx_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (sgdma_tx_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (sgdma_tx_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (sgdma_tx_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_001_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                       //                .channel
		.rf_sink_ready           (sgdma_tx_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sgdma_tx_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sgdma_tx_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sgdma_tx_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sgdma_tx_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sgdma_tx_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sgdma_tx_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sgdma_tx_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sgdma_tx_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sgdma_tx_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sgdma_tx_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sgdma_tx_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sgdma_tx_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_tx_csr_agent_rsp_fifo (
		.clk               (clkin_50_clk_clk),                              //       clk.clk
		.reset             (sgdma_tx_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (sgdma_tx_csr_agent_rf_source_data),             //        in.data
		.in_valid          (sgdma_tx_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (sgdma_tx_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sgdma_tx_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sgdma_tx_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sgdma_tx_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sgdma_tx_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sgdma_tx_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sgdma_tx_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sgdma_tx_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sgdma_rx_csr_agent (
		.clk                     (clkin_50_clk_clk),                              //             clk.clk
		.reset                   (sgdma_tx_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (sgdma_rx_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sgdma_rx_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sgdma_rx_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sgdma_rx_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sgdma_rx_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (sgdma_rx_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sgdma_rx_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sgdma_rx_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (sgdma_rx_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sgdma_rx_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (sgdma_rx_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (sgdma_rx_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sgdma_rx_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (sgdma_rx_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (sgdma_rx_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (sgdma_rx_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_002_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                       //                .channel
		.rf_sink_ready           (sgdma_rx_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sgdma_rx_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sgdma_rx_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sgdma_rx_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sgdma_rx_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sgdma_rx_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sgdma_rx_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sgdma_rx_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sgdma_rx_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sgdma_rx_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sgdma_rx_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sgdma_rx_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sgdma_rx_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_rx_csr_agent_rsp_fifo (
		.clk               (clkin_50_clk_clk),                              //       clk.clk
		.reset             (sgdma_tx_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (sgdma_rx_csr_agent_rf_source_data),             //        in.data
		.in_valid          (sgdma_rx_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (sgdma_rx_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sgdma_rx_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sgdma_rx_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sgdma_rx_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sgdma_rx_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sgdma_rx_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sgdma_rx_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sgdma_rx_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_debug_mem_slave_agent (
		.clk                     (clkin_50_clk_clk),                                     //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                              //                .channel
		.rf_sink_ready           (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (cpu_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_debug_mem_slave_agent_rsp_fifo (
		.clk               (clkin_50_clk_clk),                                     //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pb_cpu_to_io_s0_agent (
		.clk                     (clkin_50_clk_clk),                                 //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (pb_cpu_to_io_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pb_cpu_to_io_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pb_cpu_to_io_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pb_cpu_to_io_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pb_cpu_to_io_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (pb_cpu_to_io_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pb_cpu_to_io_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pb_cpu_to_io_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (pb_cpu_to_io_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pb_cpu_to_io_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (pb_cpu_to_io_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (pb_cpu_to_io_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pb_cpu_to_io_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (pb_cpu_to_io_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (pb_cpu_to_io_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (pb_cpu_to_io_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_004_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                          //                .channel
		.rf_sink_ready           (pb_cpu_to_io_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pb_cpu_to_io_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pb_cpu_to_io_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pb_cpu_to_io_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pb_cpu_to_io_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pb_cpu_to_io_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pb_cpu_to_io_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pb_cpu_to_io_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pb_cpu_to_io_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pb_cpu_to_io_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                //                .error
		.rdata_fifo_src_ready    (pb_cpu_to_io_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pb_cpu_to_io_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pb_cpu_to_io_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (20),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pb_cpu_to_io_s0_agent_rsp_fifo (
		.clk               (clkin_50_clk_clk),                                 //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (pb_cpu_to_io_s0_agent_rf_source_data),             //        in.data
		.in_valid          (pb_cpu_to_io_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (pb_cpu_to_io_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pb_cpu_to_io_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pb_cpu_to_io_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pb_cpu_to_io_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pb_cpu_to_io_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pb_cpu_to_io_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pb_cpu_to_io_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pb_cpu_to_io_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_ram_s1_agent (
		.clk                     (clkin_50_clk_clk),                               //             clk.clk
		.reset                   (sgdma_tx_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (onchip_ram_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_ram_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_ram_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_ram_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_ram_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_ram_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_ram_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_ram_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_ram_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_ram_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_ram_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_ram_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_ram_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_ram_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_ram_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_ram_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_005_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                        //                .channel
		.rf_sink_ready           (onchip_ram_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_ram_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_ram_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_ram_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_ram_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_ram_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_ram_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_ram_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_ram_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_ram_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),              //                .error
		.rdata_fifo_src_ready    (onchip_ram_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_ram_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_ram_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_ram_s1_agent_rsp_fifo (
		.clk               (clkin_50_clk_clk),                               //       clk.clk
		.reset             (sgdma_tx_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (onchip_ram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_ram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_ram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_ram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_ram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_ram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_ram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_ram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_ram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_ram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) descriptor_memory_s1_agent (
		.clk                     (clkin_50_clk_clk),                                      //             clk.clk
		.reset                   (sgdma_tx_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (descriptor_memory_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (descriptor_memory_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (descriptor_memory_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (descriptor_memory_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (descriptor_memory_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (descriptor_memory_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (descriptor_memory_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (descriptor_memory_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (descriptor_memory_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (descriptor_memory_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (descriptor_memory_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (descriptor_memory_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (descriptor_memory_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (descriptor_memory_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (descriptor_memory_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (descriptor_memory_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                               //                .channel
		.rf_sink_ready           (descriptor_memory_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (descriptor_memory_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (descriptor_memory_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (descriptor_memory_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (descriptor_memory_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (descriptor_memory_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (descriptor_memory_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (descriptor_memory_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (descriptor_memory_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (descriptor_memory_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (descriptor_memory_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (descriptor_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (descriptor_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) descriptor_memory_s1_agent_rsp_fifo (
		.clk               (clkin_50_clk_clk),                                      //       clk.clk
		.reset             (sgdma_tx_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (descriptor_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (descriptor_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (descriptor_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (descriptor_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (descriptor_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (descriptor_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (descriptor_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (descriptor_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (descriptor_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (descriptor_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_ram_s2_agent (
		.clk                     (clkin_50_clk_clk),                               //             clk.clk
		.reset                   (sgdma_tx_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (onchip_ram_s2_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_ram_s2_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_ram_s2_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_ram_s2_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_ram_s2_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_ram_s2_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_ram_s2_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_ram_s2_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_ram_s2_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_ram_s2_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_ram_s2_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_ram_s2_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_ram_s2_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_ram_s2_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_ram_s2_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_ram_s2_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_007_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                        //                .channel
		.rf_sink_ready           (onchip_ram_s2_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_ram_s2_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_ram_s2_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_ram_s2_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_ram_s2_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_ram_s2_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_ram_s2_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_ram_s2_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_ram_s2_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_ram_s2_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),              //                .error
		.rdata_fifo_src_ready    (onchip_ram_s2_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_ram_s2_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_ram_s2_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_ram_s2_agent_rsp_fifo (
		.clk               (clkin_50_clk_clk),                               //       clk.clk
		.reset             (sgdma_tx_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (onchip_ram_s2_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_ram_s2_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_ram_s2_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_ram_s2_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_ram_s2_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_ram_s2_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_ram_s2_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_ram_s2_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_ram_s2_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_ram_s2_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ext_flash_uas_agent (
		.clk                     (clkin_50_clk_clk),                                  //             clk.clk
		.reset                   (sgdma_tx_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (ext_flash_uas_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ext_flash_uas_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ext_flash_uas_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ext_flash_uas_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ext_flash_uas_agent_m0_lock),                       //                .lock
		.m0_readdata             (ext_flash_uas_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ext_flash_uas_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ext_flash_uas_agent_m0_read),                       //                .read
		.m0_waitrequest          (ext_flash_uas_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ext_flash_uas_agent_m0_writedata),                  //                .writedata
		.m0_write                (ext_flash_uas_agent_m0_write),                      //                .write
		.rp_endofpacket          (ext_flash_uas_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ext_flash_uas_agent_rp_ready),                      //                .ready
		.rp_valid                (ext_flash_uas_agent_rp_valid),                      //                .valid
		.rp_data                 (ext_flash_uas_agent_rp_data),                       //                .data
		.rp_startofpacket        (ext_flash_uas_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ext_flash_uas_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ext_flash_uas_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ext_flash_uas_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ext_flash_uas_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ext_flash_uas_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ext_flash_uas_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ext_flash_uas_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ext_flash_uas_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ext_flash_uas_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ext_flash_uas_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ext_flash_uas_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ext_flash_uas_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ext_flash_uas_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ext_flash_uas_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ext_flash_uas_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ext_flash_uas_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (ext_flash_uas_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ext_flash_uas_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ext_flash_uas_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ext_flash_uas_agent_rsp_fifo (
		.clk               (clkin_50_clk_clk),                               //       clk.clk
		.reset             (sgdma_tx_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (ext_flash_uas_agent_rf_source_data),             //        in.data
		.in_valid          (ext_flash_uas_agent_rf_source_valid),            //          .valid
		.in_ready          (ext_flash_uas_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ext_flash_uas_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ext_flash_uas_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ext_flash_uas_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ext_flash_uas_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ext_flash_uas_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ext_flash_uas_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ext_flash_uas_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ext_flash_uas_agent_rdata_fifo (
		.clk               (clkin_50_clk_clk),                           //       clk.clk
		.reset             (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ext_flash_uas_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (ext_flash_uas_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (ext_flash_uas_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (ext_flash_uas_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (ext_flash_uas_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (ext_flash_uas_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router router (
		.sink_ready         (cpu_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clkin_50_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                       //       src.ready
		.src_valid          (router_src_valid),                       //          .valid
		.src_data           (router_src_data),                        //          .data
		.src_channel        (router_src_channel),                     //          .channel
		.src_startofpacket  (router_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                  //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clkin_50_clk_clk),                              //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (sgdma_tx_m_read_agent_cp_ready),             //      sink.ready
		.sink_valid         (sgdma_tx_m_read_agent_cp_valid),             //          .valid
		.sink_data          (sgdma_tx_m_read_agent_cp_data),              //          .data
		.sink_startofpacket (sgdma_tx_m_read_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sgdma_tx_m_read_agent_cp_endofpacket),       //          .endofpacket
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                       //       src.ready
		.src_valid          (router_002_src_valid),                       //          .valid
		.src_data           (router_002_src_data),                        //          .data
		.src_channel        (router_002_src_channel),                     //          .channel
		.src_startofpacket  (router_002_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                  //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (sgdma_rx_m_write_agent_cp_ready),            //      sink.ready
		.sink_valid         (sgdma_rx_m_write_agent_cp_valid),            //          .valid
		.sink_data          (sgdma_rx_m_write_agent_cp_data),             //          .data
		.sink_startofpacket (sgdma_rx_m_write_agent_cp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (sgdma_rx_m_write_agent_cp_endofpacket),      //          .endofpacket
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                       //       src.ready
		.src_valid          (router_003_src_valid),                       //          .valid
		.src_data           (router_003_src_data),                        //          .data
		.src_channel        (router_003_src_channel),                     //          .channel
		.src_startofpacket  (router_003_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                  //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (sgdma_rx_descriptor_read_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_rx_descriptor_read_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_rx_descriptor_read_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_rx_descriptor_read_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_rx_descriptor_read_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clkin_50_clk_clk),                                //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_004_src_ready),                            //       src.ready
		.src_valid          (router_004_src_valid),                            //          .valid
		.src_data           (router_004_src_data),                             //          .data
		.src_channel        (router_004_src_channel),                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                       //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (sgdma_tx_descriptor_read_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_tx_descriptor_read_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_tx_descriptor_read_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_tx_descriptor_read_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_tx_descriptor_read_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clkin_50_clk_clk),                                //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_005_src_ready),                            //       src.ready
		.src_valid          (router_005_src_valid),                            //          .valid
		.src_data           (router_005_src_data),                             //          .data
		.src_channel        (router_005_src_channel),                          //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                       //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_004 router_006 (
		.sink_ready         (sgdma_rx_descriptor_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_rx_descriptor_write_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_rx_descriptor_write_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_rx_descriptor_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_rx_descriptor_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clkin_50_clk_clk),                                 //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_006_src_ready),                             //       src.ready
		.src_valid          (router_006_src_valid),                             //          .valid
		.src_data           (router_006_src_data),                              //          .data
		.src_channel        (router_006_src_channel),                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                        //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_004 router_007 (
		.sink_ready         (sgdma_tx_descriptor_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_tx_descriptor_write_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_tx_descriptor_write_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_tx_descriptor_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_tx_descriptor_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clkin_50_clk_clk),                                 //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_007_src_ready),                             //       src.ready
		.src_valid          (router_007_src_valid),                             //          .valid
		.src_data           (router_007_src_data),                              //          .data
		.src_channel        (router_007_src_channel),                           //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                        //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (tse_mac_control_port_agent_rp_ready),         //      sink.ready
		.sink_valid         (tse_mac_control_port_agent_rp_valid),         //          .valid
		.sink_data          (tse_mac_control_port_agent_rp_data),          //          .data
		.sink_startofpacket (tse_mac_control_port_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (tse_mac_control_port_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clkin_50_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_008_src_ready),                        //       src.ready
		.src_valid          (router_008_src_valid),                        //          .valid
		.src_data           (router_008_src_data),                         //          .data
		.src_channel        (router_008_src_channel),                      //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                   //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_008 router_009 (
		.sink_ready         (sgdma_tx_csr_agent_rp_ready),                //      sink.ready
		.sink_valid         (sgdma_tx_csr_agent_rp_valid),                //          .valid
		.sink_data          (sgdma_tx_csr_agent_rp_data),                 //          .data
		.sink_startofpacket (sgdma_tx_csr_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (sgdma_tx_csr_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                       //       src.ready
		.src_valid          (router_009_src_valid),                       //          .valid
		.src_data           (router_009_src_data),                        //          .data
		.src_channel        (router_009_src_channel),                     //          .channel
		.src_startofpacket  (router_009_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                  //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_008 router_010 (
		.sink_ready         (sgdma_rx_csr_agent_rp_ready),                //      sink.ready
		.sink_valid         (sgdma_rx_csr_agent_rp_valid),                //          .valid
		.sink_data          (sgdma_rx_csr_agent_rp_data),                 //          .data
		.sink_startofpacket (sgdma_rx_csr_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (sgdma_rx_csr_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                       //       src.ready
		.src_valid          (router_010_src_valid),                       //          .valid
		.src_data           (router_010_src_data),                        //          .data
		.src_channel        (router_010_src_channel),                     //          .channel
		.src_startofpacket  (router_010_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                  //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_011 router_011 (
		.sink_ready         (cpu_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (cpu_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_011_src_ready),                       //       src.ready
		.src_valid          (router_011_src_valid),                       //          .valid
		.src_data           (router_011_src_data),                        //          .data
		.src_channel        (router_011_src_channel),                     //          .channel
		.src_startofpacket  (router_011_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                  //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_008 router_012 (
		.sink_ready         (pb_cpu_to_io_s0_agent_rp_ready),         //      sink.ready
		.sink_valid         (pb_cpu_to_io_s0_agent_rp_valid),         //          .valid
		.sink_data          (pb_cpu_to_io_s0_agent_rp_data),          //          .data
		.sink_startofpacket (pb_cpu_to_io_s0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pb_cpu_to_io_s0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clkin_50_clk_clk),                       //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_012_src_ready),                   //       src.ready
		.src_valid          (router_012_src_valid),                   //          .valid
		.src_data           (router_012_src_data),                    //          .data
		.src_channel        (router_012_src_channel),                 //          .channel
		.src_startofpacket  (router_012_src_startofpacket),           //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_013 router_013 (
		.sink_ready         (onchip_ram_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (onchip_ram_s1_agent_rp_valid),               //          .valid
		.sink_data          (onchip_ram_s1_agent_rp_data),                //          .data
		.sink_startofpacket (onchip_ram_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (onchip_ram_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                       //       src.ready
		.src_valid          (router_013_src_valid),                       //          .valid
		.src_data           (router_013_src_data),                        //          .data
		.src_channel        (router_013_src_channel),                     //          .channel
		.src_startofpacket  (router_013_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                  //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_014 router_014 (
		.sink_ready         (descriptor_memory_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (descriptor_memory_s1_agent_rp_valid),         //          .valid
		.sink_data          (descriptor_memory_s1_agent_rp_data),          //          .data
		.sink_startofpacket (descriptor_memory_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (descriptor_memory_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clkin_50_clk_clk),                            //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_014_src_ready),                        //       src.ready
		.src_valid          (router_014_src_valid),                        //          .valid
		.src_data           (router_014_src_data),                         //          .data
		.src_channel        (router_014_src_channel),                      //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                   //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_013 router_015 (
		.sink_ready         (onchip_ram_s2_agent_rp_ready),               //      sink.ready
		.sink_valid         (onchip_ram_s2_agent_rp_valid),               //          .valid
		.sink_data          (onchip_ram_s2_agent_rp_data),                //          .data
		.sink_startofpacket (onchip_ram_s2_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (onchip_ram_s2_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                       //       src.ready
		.src_valid          (router_015_src_valid),                       //          .valid
		.src_data           (router_015_src_data),                        //          .data
		.src_channel        (router_015_src_channel),                     //          .channel
		.src_startofpacket  (router_015_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                  //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_router_016 router_016 (
		.sink_ready         (ext_flash_uas_agent_rp_ready),               //      sink.ready
		.sink_valid         (ext_flash_uas_agent_rp_valid),               //          .valid
		.sink_data          (ext_flash_uas_agent_rp_data),                //          .data
		.sink_startofpacket (ext_flash_uas_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (ext_flash_uas_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                       //       src.ready
		.src_valid          (router_016_src_valid),                       //          .valid
		.src_data           (router_016_src_data),                        //          .data
		.src_channel        (router_016_src_channel),                     //          .channel
		.src_startofpacket  (router_016_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                  //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (19),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (9),
		.VALID_WIDTH               (9),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_data_master_limiter (
		.clk                    (clkin_50_clk_clk),                              //       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //          .valid
		.cmd_sink_data          (router_src_data),                               //          .data
		.cmd_sink_channel       (router_src_channel),                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.cmd_src_ready          (cpu_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                             //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                             //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                           //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                              //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                     //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                       //          .endofpacket
		.rsp_src_ready          (cpu_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (9),
		.VALID_WIDTH               (9),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_instruction_master_limiter (
		.clk                    (clkin_50_clk_clk),                                     //       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                 //          .valid
		.cmd_sink_data          (router_001_src_data),                                  //          .data
		.cmd_sink_channel       (router_001_src_channel),                               //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                         //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                           //          .endofpacket
		.cmd_src_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                              //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                          //          .endofpacket
		.rsp_src_ready          (cpu_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (9),
		.VALID_WIDTH               (9),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) sgdma_tx_m_read_limiter (
		.clk                    (clkin_50_clk_clk),                              //       clk.clk
		.reset                  (sgdma_tx_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                          //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                          //          .valid
		.cmd_sink_data          (router_002_src_data),                           //          .data
		.cmd_sink_channel       (router_002_src_channel),                        //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                  //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                    //          .endofpacket
		.cmd_src_ready          (sgdma_tx_m_read_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (sgdma_tx_m_read_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (sgdma_tx_m_read_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (sgdma_tx_m_read_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (sgdma_tx_m_read_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                         //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                       //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                          //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                   //          .endofpacket
		.rsp_src_ready          (sgdma_tx_m_read_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (sgdma_tx_m_read_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (sgdma_tx_m_read_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (sgdma_tx_m_read_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (sgdma_tx_m_read_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (sgdma_tx_m_read_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (sgdma_tx_m_read_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (69),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (61),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) ext_flash_uas_burst_adapter (
		.clk                   (clkin_50_clk_clk),                                  //       cr0.clk
		.reset                 (sgdma_tx_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (ext_flash_uas_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (ext_flash_uas_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (ext_flash_uas_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (ext_flash_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (ext_flash_uas_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (ext_flash_uas_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (ext_flash_uas_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ext_flash_uas_burst_adapter_source0_data),          //          .data
		.source0_channel       (ext_flash_uas_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ext_flash_uas_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ext_flash_uas_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ext_flash_uas_burst_adapter_source0_ready)          //          .ready
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clkin_50_clk_clk),                              //        clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready         (cpu_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                          //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                          //           .valid
		.src0_data          (cmd_demux_src0_data),                           //           .data
		.src0_channel       (cmd_demux_src0_channel),                        //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                  //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                    //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                          //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                          //           .valid
		.src1_data          (cmd_demux_src1_data),                           //           .data
		.src1_channel       (cmd_demux_src1_channel),                        //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                  //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                    //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                          //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                          //           .valid
		.src2_data          (cmd_demux_src2_data),                           //           .data
		.src2_channel       (cmd_demux_src2_channel),                        //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                  //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                    //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                          //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                          //           .valid
		.src3_data          (cmd_demux_src3_data),                           //           .data
		.src3_channel       (cmd_demux_src3_channel),                        //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                  //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                    //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                          //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                          //           .valid
		.src4_data          (cmd_demux_src4_data),                           //           .data
		.src4_channel       (cmd_demux_src4_channel),                        //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                  //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                    //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                          //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                          //           .valid
		.src5_data          (cmd_demux_src5_data),                           //           .data
		.src5_channel       (cmd_demux_src5_channel),                        //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                  //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                    //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                          //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                          //           .valid
		.src6_data          (cmd_demux_src6_data),                           //           .data
		.src6_channel       (cmd_demux_src6_channel),                        //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                  //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                    //           .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                          //       src7.ready
		.src7_valid         (cmd_demux_src7_valid),                          //           .valid
		.src7_data          (cmd_demux_src7_data),                           //           .data
		.src7_channel       (cmd_demux_src7_channel),                        //           .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                  //           .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                    //           .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                          //       src8.ready
		.src8_valid         (cmd_demux_src8_valid),                          //           .valid
		.src8_data          (cmd_demux_src8_data),                           //           .data
		.src8_channel       (cmd_demux_src8_channel),                        //           .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                  //           .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket)                     //           .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clkin_50_clk_clk),                                     //        clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (cpu_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                             //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                             //           .valid
		.src0_data          (cmd_demux_001_src0_data),                              //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                           //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                     //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                       //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                             //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                             //           .valid
		.src1_data          (cmd_demux_001_src1_data),                              //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                           //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                     //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                       //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                             //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                             //           .valid
		.src2_data          (cmd_demux_001_src2_data),                              //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                           //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                     //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                       //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                             //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                             //           .valid
		.src3_data          (cmd_demux_001_src3_data),                              //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                           //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                     //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)                        //           .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clkin_50_clk_clk),                              //        clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset),    //  clk_reset.reset
		.sink_ready         (sgdma_tx_m_read_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (sgdma_tx_m_read_limiter_cmd_src_channel),       //           .channel
		.sink_data          (sgdma_tx_m_read_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (sgdma_tx_m_read_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (sgdma_tx_m_read_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (sgdma_tx_m_read_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                      //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                      //           .valid
		.src0_data          (cmd_demux_002_src0_data),                       //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                    //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),              //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                      //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                      //           .valid
		.src1_data          (cmd_demux_002_src1_data),                       //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                    //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),              //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                 //           .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                       //      sink.ready
		.sink_channel       (router_003_src_channel),                     //          .channel
		.sink_data          (router_003_src_data),                        //          .data
		.sink_startofpacket (router_003_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_003_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_003_src0_data),                    //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),             //          .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                   //      src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                   //          .valid
		.src1_data          (cmd_demux_003_src1_data),                    //          .data
		.src1_channel       (cmd_demux_003_src1_channel),                 //          .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_demux_004 cmd_demux_004 (
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                       //      sink.ready
		.sink_channel       (router_004_src_channel),                     //          .channel
		.sink_data          (router_004_src_data),                        //          .data
		.sink_startofpacket (router_004_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_004_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_004_src0_data),                    //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_demux_004 cmd_demux_005 (
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                       //      sink.ready
		.sink_channel       (router_005_src_channel),                     //          .channel
		.sink_data          (router_005_src_data),                        //          .data
		.sink_startofpacket (router_005_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_005_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_005_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_005_src0_data),                    //          .data
		.src0_channel       (cmd_demux_005_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_demux_004 cmd_demux_006 (
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                       //      sink.ready
		.sink_channel       (router_006_src_channel),                     //          .channel
		.sink_data          (router_006_src_data),                        //          .data
		.sink_startofpacket (router_006_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_006_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_006_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_006_src0_data),                    //          .data
		.src0_channel       (cmd_demux_006_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_demux_004 cmd_demux_007 (
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                       //      sink.ready
		.sink_channel       (router_007_src_channel),                     //          .channel
		.sink_data          (router_007_src_data),                        //          .data
		.sink_startofpacket (router_007_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_007_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_007_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_007_src0_data),                    //          .data
		.src0_channel       (cmd_demux_007_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clkin_50_clk_clk),                           //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_src_valid),                          //          .valid
		.src_data            (cmd_mux_src_data),                           //          .data
		.src_channel         (cmd_mux_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                     //          .channel
		.sink0_data          (cmd_demux_src0_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                  //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clkin_50_clk_clk),                           //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                      //          .valid
		.src_data            (cmd_mux_001_src_data),                       //          .data
		.src_channel         (cmd_mux_001_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                     //          .channel
		.sink0_data          (cmd_demux_src1_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                  //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clkin_50_clk_clk),                           //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                      //          .valid
		.src_data            (cmd_mux_002_src_data),                       //          .data
		.src_channel         (cmd_mux_002_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                     //          .channel
		.sink0_data          (cmd_demux_src2_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                  //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (clkin_50_clk_clk),                      //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                 //          .valid
		.src_data            (cmd_mux_003_src_data),                  //          .data
		.src_channel         (cmd_mux_003_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                //          .channel
		.sink0_data          (cmd_demux_src3_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src0_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)         //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clkin_50_clk_clk),                      //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                 //          .valid
		.src_data            (cmd_mux_004_src_data),                  //          .data
		.src_channel         (cmd_mux_004_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                //          .channel
		.sink0_data          (cmd_demux_src4_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)             //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_mux_005 cmd_mux_005 (
		.clk                 (clkin_50_clk_clk),                           //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                      //          .valid
		.src_data            (cmd_mux_005_src_data),                       //          .data
		.src_channel         (cmd_mux_005_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                     //          .channel
		.sink0_data          (cmd_demux_src5_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                   //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                 //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                    //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket),             //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                   //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                   //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                 //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                    //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),             //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                   //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                   //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                 //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                    //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),           //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_mux_006 cmd_mux_006 (
		.clk                 (clkin_50_clk_clk),                           //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                      //          .valid
		.src_data            (cmd_mux_006_src_data),                       //          .data
		.src_channel         (cmd_mux_006_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                     //          .channel
		.sink0_data          (cmd_demux_src6_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_004_src0_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_004_src0_valid),                   //          .valid
		.sink1_channel       (cmd_demux_004_src0_channel),                 //          .channel
		.sink1_data          (cmd_demux_004_src0_data),                    //          .data
		.sink1_startofpacket (cmd_demux_004_src0_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src0_endofpacket),             //          .endofpacket
		.sink2_ready         (cmd_demux_005_src0_ready),                   //     sink2.ready
		.sink2_valid         (cmd_demux_005_src0_valid),                   //          .valid
		.sink2_channel       (cmd_demux_005_src0_channel),                 //          .channel
		.sink2_data          (cmd_demux_005_src0_data),                    //          .data
		.sink2_startofpacket (cmd_demux_005_src0_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (cmd_demux_005_src0_endofpacket),             //          .endofpacket
		.sink3_ready         (cmd_demux_006_src0_ready),                   //     sink3.ready
		.sink3_valid         (cmd_demux_006_src0_valid),                   //          .valid
		.sink3_channel       (cmd_demux_006_src0_channel),                 //          .channel
		.sink3_data          (cmd_demux_006_src0_data),                    //          .data
		.sink3_startofpacket (cmd_demux_006_src0_startofpacket),           //          .startofpacket
		.sink3_endofpacket   (cmd_demux_006_src0_endofpacket),             //          .endofpacket
		.sink4_ready         (cmd_demux_007_src0_ready),                   //     sink4.ready
		.sink4_valid         (cmd_demux_007_src0_valid),                   //          .valid
		.sink4_channel       (cmd_demux_007_src0_channel),                 //          .channel
		.sink4_data          (cmd_demux_007_src0_data),                    //          .data
		.sink4_startofpacket (cmd_demux_007_src0_startofpacket),           //          .startofpacket
		.sink4_endofpacket   (cmd_demux_007_src0_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_mux_005 cmd_mux_007 (
		.clk                 (clkin_50_clk_clk),                           //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                      //          .valid
		.src_data            (cmd_mux_007_src_data),                       //          .data
		.src_channel         (cmd_mux_007_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                     //          .channel
		.sink0_data          (cmd_demux_src7_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                   //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                 //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                    //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),             //          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),                   //     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),                   //          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),                 //          .channel
		.sink2_data          (cmd_demux_002_src1_data),                    //          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket),             //          .endofpacket
		.sink3_ready         (cmd_demux_003_src1_ready),                   //     sink3.ready
		.sink3_valid         (cmd_demux_003_src1_valid),                   //          .valid
		.sink3_channel       (cmd_demux_003_src1_channel),                 //          .channel
		.sink3_data          (cmd_demux_003_src1_data),                    //          .data
		.sink3_startofpacket (cmd_demux_003_src1_startofpacket),           //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src1_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_mux_003 cmd_mux_008 (
		.clk                 (clkin_50_clk_clk),                           //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                      //          .valid
		.src_data            (cmd_mux_008_src_data),                       //          .data
		.src_channel         (cmd_mux_008_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                     //          .channel
		.sink0_data          (cmd_demux_src8_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                   //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                 //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                    //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_demux_004 rsp_demux (
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                       //      sink.ready
		.sink_channel       (router_008_src_channel),                     //          .channel
		.sink_data          (router_008_src_data),                        //          .data
		.sink_startofpacket (router_008_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_008_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_src0_data),                        //          .data
		.src0_channel       (rsp_demux_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                  //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_demux_004 rsp_demux_001 (
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                       //      sink.ready
		.sink_channel       (router_009_src_channel),                     //          .channel
		.sink_data          (router_009_src_data),                        //          .data
		.sink_startofpacket (router_009_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_009_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_001_src0_data),                    //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_demux_004 rsp_demux_002 (
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                       //      sink.ready
		.sink_channel       (router_010_src_channel),                     //          .channel
		.sink_data          (router_010_src_data),                        //          .data
		.sink_startofpacket (router_010_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_010_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_002_src0_data),                    //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_demux_003 rsp_demux_003 (
		.clk                (clkin_50_clk_clk),                      //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                  //      sink.ready
		.sink_channel       (router_011_src_channel),                //          .channel
		.sink_data          (router_011_src_data),                   //          .data
		.sink_startofpacket (router_011_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_011_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),              //          .valid
		.src0_data          (rsp_demux_003_src0_data),               //          .data
		.src0_channel       (rsp_demux_003_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),              //          .valid
		.src1_data          (rsp_demux_003_src1_data),               //          .data
		.src1_channel       (rsp_demux_003_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)         //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_demux_004 rsp_demux_004 (
		.clk                (clkin_50_clk_clk),                      //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                  //      sink.ready
		.sink_channel       (router_012_src_channel),                //          .channel
		.sink_data          (router_012_src_data),                   //          .data
		.sink_startofpacket (router_012_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_012_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),              //          .valid
		.src0_data          (rsp_demux_004_src0_data),               //          .data
		.src0_channel       (rsp_demux_004_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)         //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_rsp_demux_005 rsp_demux_005 (
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                       //      sink.ready
		.sink_channel       (router_013_src_channel),                     //          .channel
		.sink_data          (router_013_src_data),                        //          .data
		.sink_startofpacket (router_013_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_013_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_005_src0_data),                    //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_005_src1_data),                    //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_005_src2_data),                    //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket),             //          .endofpacket
		.src3_ready         (rsp_demux_005_src3_ready),                   //      src3.ready
		.src3_valid         (rsp_demux_005_src3_valid),                   //          .valid
		.src3_data          (rsp_demux_005_src3_data),                    //          .data
		.src3_channel       (rsp_demux_005_src3_channel),                 //          .channel
		.src3_startofpacket (rsp_demux_005_src3_startofpacket),           //          .startofpacket
		.src3_endofpacket   (rsp_demux_005_src3_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_rsp_demux_006 rsp_demux_006 (
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                       //      sink.ready
		.sink_channel       (router_014_src_channel),                     //          .channel
		.sink_data          (router_014_src_data),                        //          .data
		.sink_startofpacket (router_014_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_014_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_006_src0_data),                    //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_006_src1_data),                    //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_006_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_006_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_006_src2_data),                    //          .data
		.src2_channel       (rsp_demux_006_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_006_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_006_src2_endofpacket),             //          .endofpacket
		.src3_ready         (rsp_demux_006_src3_ready),                   //      src3.ready
		.src3_valid         (rsp_demux_006_src3_valid),                   //          .valid
		.src3_data          (rsp_demux_006_src3_data),                    //          .data
		.src3_channel       (rsp_demux_006_src3_channel),                 //          .channel
		.src3_startofpacket (rsp_demux_006_src3_startofpacket),           //          .startofpacket
		.src3_endofpacket   (rsp_demux_006_src3_endofpacket),             //          .endofpacket
		.src4_ready         (rsp_demux_006_src4_ready),                   //      src4.ready
		.src4_valid         (rsp_demux_006_src4_valid),                   //          .valid
		.src4_data          (rsp_demux_006_src4_data),                    //          .data
		.src4_channel       (rsp_demux_006_src4_channel),                 //          .channel
		.src4_startofpacket (rsp_demux_006_src4_startofpacket),           //          .startofpacket
		.src4_endofpacket   (rsp_demux_006_src4_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_rsp_demux_005 rsp_demux_007 (
		.clk                (clkin_50_clk_clk),                           //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                       //      sink.ready
		.sink_channel       (router_015_src_channel),                     //          .channel
		.sink_data          (router_015_src_data),                        //          .data
		.sink_startofpacket (router_015_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_015_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_007_src0_data),                    //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_007_src1_data),                    //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket),             //          .endofpacket
		.src2_ready         (rsp_demux_007_src2_ready),                   //      src2.ready
		.src2_valid         (rsp_demux_007_src2_valid),                   //          .valid
		.src2_data          (rsp_demux_007_src2_data),                    //          .data
		.src2_channel       (rsp_demux_007_src2_channel),                 //          .channel
		.src2_startofpacket (rsp_demux_007_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (rsp_demux_007_src2_endofpacket),             //          .endofpacket
		.src3_ready         (rsp_demux_007_src3_ready),                   //      src3.ready
		.src3_valid         (rsp_demux_007_src3_valid),                   //          .valid
		.src3_data          (rsp_demux_007_src3_data),                    //          .data
		.src3_channel       (rsp_demux_007_src3_channel),                 //          .channel
		.src3_startofpacket (rsp_demux_007_src3_startofpacket),           //          .startofpacket
		.src3_endofpacket   (rsp_demux_007_src3_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_cmd_demux_003 rsp_demux_008 (
		.clk                (clkin_50_clk_clk),                                  //       clk.clk
		.reset              (sgdma_tx_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.sink_ready         (ext_flash_uas_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (ext_flash_uas_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (ext_flash_uas_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (ext_flash_uas_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (ext_flash_uas_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (ext_flash_uas_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_008_src0_data),                           //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_008_src1_data),                           //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                     //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clkin_50_clk_clk),                      //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                     //       src.ready
		.src_valid           (rsp_mux_src_valid),                     //          .valid
		.src_data            (rsp_mux_src_data),                      //          .data
		.src_channel         (rsp_mux_src_channel),                   //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                  //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                  //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                //          .channel
		.sink0_data          (rsp_demux_src0_data),                   //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),            //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),              //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),              //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),            //          .channel
		.sink1_data          (rsp_demux_001_src0_data),               //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),        //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),              //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),              //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),            //          .channel
		.sink2_data          (rsp_demux_002_src0_data),               //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),        //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),              //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),              //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),            //          .channel
		.sink3_data          (rsp_demux_003_src0_data),               //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),        //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),              //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),              //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),            //          .channel
		.sink4_data          (rsp_demux_004_src0_data),               //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),      //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),        //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),              //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),              //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),            //          .channel
		.sink5_data          (rsp_demux_005_src0_data),               //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),      //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),        //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),              //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),              //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),            //          .channel
		.sink6_data          (rsp_demux_006_src0_data),               //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),      //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),        //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),              //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),              //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),            //          .channel
		.sink7_data          (rsp_demux_007_src0_data),               //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),      //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),        //          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),              //     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),              //          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),            //          .channel
		.sink8_data          (rsp_demux_008_src0_data),               //          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),      //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket)         //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clkin_50_clk_clk),                      //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                 //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                 //          .valid
		.src_data            (rsp_mux_001_src_data),                  //          .data
		.src_channel         (rsp_mux_001_src_channel),               //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),           //          .endofpacket
		.sink0_ready         (rsp_demux_003_src1_ready),              //     sink0.ready
		.sink0_valid         (rsp_demux_003_src1_valid),              //          .valid
		.sink0_channel       (rsp_demux_003_src1_channel),            //          .channel
		.sink0_data          (rsp_demux_003_src1_data),               //          .data
		.sink0_startofpacket (rsp_demux_003_src1_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src1_endofpacket),        //          .endofpacket
		.sink1_ready         (rsp_demux_005_src1_ready),              //     sink1.ready
		.sink1_valid         (rsp_demux_005_src1_valid),              //          .valid
		.sink1_channel       (rsp_demux_005_src1_channel),            //          .channel
		.sink1_data          (rsp_demux_005_src1_data),               //          .data
		.sink1_startofpacket (rsp_demux_005_src1_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_005_src1_endofpacket),        //          .endofpacket
		.sink2_ready         (rsp_demux_007_src1_ready),              //     sink2.ready
		.sink2_valid         (rsp_demux_007_src1_valid),              //          .valid
		.sink2_channel       (rsp_demux_007_src1_channel),            //          .channel
		.sink2_data          (rsp_demux_007_src1_data),               //          .data
		.sink2_startofpacket (rsp_demux_007_src1_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (rsp_demux_007_src1_endofpacket),        //          .endofpacket
		.sink3_ready         (rsp_demux_008_src1_ready),              //     sink3.ready
		.sink3_valid         (rsp_demux_008_src1_valid),              //          .valid
		.sink3_channel       (rsp_demux_008_src1_channel),            //          .channel
		.sink3_data          (rsp_demux_008_src1_data),               //          .data
		.sink3_startofpacket (rsp_demux_008_src1_startofpacket),      //          .startofpacket
		.sink3_endofpacket   (rsp_demux_008_src1_endofpacket)         //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clkin_50_clk_clk),                           //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                      //          .valid
		.src_data            (rsp_mux_002_src_data),                       //          .data
		.src_channel         (rsp_mux_002_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_005_src2_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_005_src2_valid),                   //          .valid
		.sink0_channel       (rsp_demux_005_src2_channel),                 //          .channel
		.sink0_data          (rsp_demux_005_src2_data),                    //          .data
		.sink0_startofpacket (rsp_demux_005_src2_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_005_src2_endofpacket),             //          .endofpacket
		.sink1_ready         (rsp_demux_007_src2_ready),                   //     sink1.ready
		.sink1_valid         (rsp_demux_007_src2_valid),                   //          .valid
		.sink1_channel       (rsp_demux_007_src2_channel),                 //          .channel
		.sink1_data          (rsp_demux_007_src2_data),                    //          .data
		.sink1_startofpacket (rsp_demux_007_src2_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (rsp_demux_007_src2_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_rsp_mux_002 rsp_mux_003 (
		.clk                 (clkin_50_clk_clk),                           //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                      //          .valid
		.src_data            (rsp_mux_003_src_data),                       //          .data
		.src_channel         (rsp_mux_003_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_005_src3_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_005_src3_valid),                   //          .valid
		.sink0_channel       (rsp_demux_005_src3_channel),                 //          .channel
		.sink0_data          (rsp_demux_005_src3_data),                    //          .data
		.sink0_startofpacket (rsp_demux_005_src3_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_005_src3_endofpacket),             //          .endofpacket
		.sink1_ready         (rsp_demux_007_src3_ready),                   //     sink1.ready
		.sink1_valid         (rsp_demux_007_src3_valid),                   //          .valid
		.sink1_channel       (rsp_demux_007_src3_channel),                 //          .channel
		.sink1_data          (rsp_demux_007_src3_data),                    //          .data
		.sink1_startofpacket (rsp_demux_007_src3_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (rsp_demux_007_src3_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_rsp_mux_004 rsp_mux_004 (
		.clk                 (clkin_50_clk_clk),                           //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                      //          .valid
		.src_data            (rsp_mux_004_src_data),                       //          .data
		.src_channel         (rsp_mux_004_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_006_src1_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_006_src1_valid),                   //          .valid
		.sink0_channel       (rsp_demux_006_src1_channel),                 //          .channel
		.sink0_data          (rsp_demux_006_src1_data),                    //          .data
		.sink0_startofpacket (rsp_demux_006_src1_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_006_src1_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_rsp_mux_004 rsp_mux_005 (
		.clk                 (clkin_50_clk_clk),                           //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                      //          .valid
		.src_data            (rsp_mux_005_src_data),                       //          .data
		.src_channel         (rsp_mux_005_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_006_src2_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_006_src2_valid),                   //          .valid
		.sink0_channel       (rsp_demux_006_src2_channel),                 //          .channel
		.sink0_data          (rsp_demux_006_src2_data),                    //          .data
		.sink0_startofpacket (rsp_demux_006_src2_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_006_src2_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_rsp_mux_004 rsp_mux_006 (
		.clk                 (clkin_50_clk_clk),                           //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                      //          .valid
		.src_data            (rsp_mux_006_src_data),                       //          .data
		.src_channel         (rsp_mux_006_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_006_src3_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_006_src3_valid),                   //          .valid
		.sink0_channel       (rsp_demux_006_src3_channel),                 //          .channel
		.sink0_data          (rsp_demux_006_src3_data),                    //          .data
		.sink0_startofpacket (rsp_demux_006_src3_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_006_src3_endofpacket)              //          .endofpacket
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_rsp_mux_004 rsp_mux_007 (
		.clk                 (clkin_50_clk_clk),                           //       clk.clk
		.reset               (sgdma_tx_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_007_src_valid),                      //          .valid
		.src_data            (rsp_mux_007_src_data),                       //          .data
		.src_channel         (rsp_mux_007_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_006_src4_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_006_src4_valid),                   //          .valid
		.sink0_channel       (rsp_demux_006_src4_channel),                 //          .channel
		.sink0_data          (rsp_demux_006_src4_data),                    //          .data
		.sink0_startofpacket (rsp_demux_006_src4_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_006_src4_endofpacket)              //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (88),
		.IN_PKT_RESPONSE_STATUS_L      (87),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (89),
		.IN_PKT_ORI_BURST_SIZE_H       (91),
		.IN_ST_DATA_W                  (92),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ext_flash_uas_rsp_width_adapter (
		.clk                  (clkin_50_clk_clk),                                  //       clk.clk
		.reset                (sgdma_tx_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (router_016_src_valid),                              //      sink.valid
		.in_channel           (router_016_src_channel),                            //          .channel
		.in_startofpacket     (router_016_src_startofpacket),                      //          .startofpacket
		.in_endofpacket       (router_016_src_endofpacket),                        //          .endofpacket
		.in_ready             (router_016_src_ready),                              //          .ready
		.in_data              (router_016_src_data),                               //          .data
		.out_endofpacket      (ext_flash_uas_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ext_flash_uas_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ext_flash_uas_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ext_flash_uas_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ext_flash_uas_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ext_flash_uas_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (88),
		.OUT_PKT_RESPONSE_STATUS_L     (87),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (89),
		.OUT_PKT_ORI_BURST_SIZE_H      (91),
		.OUT_ST_DATA_W                 (92),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ext_flash_uas_cmd_width_adapter (
		.clk                  (clkin_50_clk_clk),                                  //       clk.clk
		.reset                (sgdma_tx_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (cmd_mux_008_src_valid),                             //      sink.valid
		.in_channel           (cmd_mux_008_src_channel),                           //          .channel
		.in_startofpacket     (cmd_mux_008_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (cmd_mux_008_src_endofpacket),                       //          .endofpacket
		.in_ready             (cmd_mux_008_src_ready),                             //          .ready
		.in_data              (cmd_mux_008_src_data),                              //          .data
		.out_endofpacket      (ext_flash_uas_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ext_flash_uas_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ext_flash_uas_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ext_flash_uas_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ext_flash_uas_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ext_flash_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clkin_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (sgdma_tx_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (tse_mac_control_port_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (tse_mac_control_port_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (tse_mac_control_port_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                    //         .error
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clkin_50_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (sgdma_tx_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sgdma_tx_csr_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (sgdma_tx_csr_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (sgdma_tx_csr_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)           //         .error
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clkin_50_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (sgdma_tx_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sgdma_rx_csr_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (sgdma_rx_csr_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (sgdma_rx_csr_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)           //         .error
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clkin_50_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpu_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cpu_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cpu_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clkin_50_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (pb_cpu_to_io_s0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (pb_cpu_to_io_s0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (pb_cpu_to_io_s0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)           //         .error
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clkin_50_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (sgdma_tx_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_ram_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (onchip_ram_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (onchip_ram_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)           //         .error
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clkin_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (sgdma_tx_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (descriptor_memory_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (descriptor_memory_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (descriptor_memory_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                //         .error
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clkin_50_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (sgdma_tx_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_ram_s2_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (onchip_ram_s2_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (onchip_ram_s2_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)           //         .error
	);

	a5gx_starter_fpga_bup_qsys_mm_interconnect_0_avalon_st_adapter_008 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clkin_50_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (sgdma_tx_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ext_flash_uas_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (ext_flash_uas_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (ext_flash_uas_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)           //         .error
	);

endmodule
